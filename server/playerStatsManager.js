class PlayerStatsManager {
  constructor(database) {
    this.db = database;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  async saveGameResults(roomId, gameResults) {
    try {
      console.log(`üìä [PlayerStats] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã ${roomId}:`, gameResults);
      
      const {
        players = [],
        winner,
        gameSettings = {},
        gameDuration,
        gameData = {}
      } = gameResults;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä—ã
      const gameId = await this.db.createGame({
        room_id: roomId,
        room_code: gameSettings.roomCode || null,
        host_user_id: gameSettings.hostUserId || players[0]?.userId,
        player_count: players.length,
        game_mode: gameSettings.gameMode || 'classic',
        started_at: new Date(gameSettings.startTime || Date.now()),
        game_data_json: gameData
      });

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      await this.db.finishGame(gameId, {
        ended_at: new Date(),
        duration_ms: gameDuration || 0,
        winner_user_id: winner?.userId || null
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      for (let i = 0; i < players.length; i++) {
        const player = players[i];
        await this.processPlayerGameResult(gameId, player, i + 1, gameResults);
      }

      console.log(`‚úÖ [PlayerStats] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã ${roomId} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã:`, error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  async processPlayerGameResult(gameId, playerResult, position, gameResults) {
    try {
      const { userId } = playerResult;
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
      await this.db.upsertPlayer({
        user_id: userId,
        username: playerResult.username || playerResult.name,
        first_name: playerResult.firstName,
        last_name: playerResult.lastName,
        photo_url: playerResult.photoUrl
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const playerStats = this.calculatePlayerStats(playerResult, position, gameResults);

      // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ
      await this.db.addGameParticipation({
        game_id: gameId,
        user_id: userId,
        position: position,
        final_cards: playerStats.finalCards,
        penki_used: playerStats.penkiUsed,
        cards_played: playerStats.cardsPlayed,
        penalty_cards: playerStats.penaltyCards,
        one_card_declarations: playerStats.oneCardDeclarations,
        turns_count: playerStats.turnsCount,
        game_score: playerStats.gameScore
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
      await this.updatePlayerOverallStats(userId, playerStats, gameResults);

      console.log(`üìà [PlayerStats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞:`, error);
      throw error;
    }
  }

  // –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
  calculatePlayerStats(playerResult, position, gameResults) {
    const {
      cards = [],
      penki = [],
      gameStats = {},
      isBot = false
    } = playerResult;

    const finalCards = cards.length + penki.length;
    const isWinner = position === 1;
    const penkiUsed = gameStats.penkiActivated || false;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const cardsPlayed = gameStats.cardsPlayed || 0;
    const penaltyCards = gameStats.penaltyCardsReceived || 0;
    const oneCardDeclarations = gameStats.oneCardDeclarations || 0;
    const turnsCount = gameStats.turnsCount || 0;

    // –í—ã—á–∏—Å–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏
    let gameScore = 0;
    if (isWinner) {
      gameScore += 100; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—É
      gameScore += Math.max(0, 50 - finalCards * 10); // –ë–æ–Ω—É—Å –∑–∞ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
    } else {
      gameScore = Math.max(10, 80 - finalCards * 5 - penaltyCards * 2); // –û—á–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ
    }

    // –ë–æ–Ω—É—Å—ã –∏ —à—Ç—Ä–∞—Ñ—ã
    if (penkiUsed) gameScore += 20; // –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ–Ω—å–∫–æ–≤
    if (penaltyCards > 0) gameScore -= penaltyCards * 3; // –®—Ç—Ä–∞—Ñ –∑–∞ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –∫–∞—Ä—Ç—ã
    gameScore += oneCardDeclarations * 5; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

    return {
      finalCards,
      isWinner,
      penkiUsed,
      cardsPlayed,
      penaltyCards,
      oneCardDeclarations,
      turnsCount,
      gameScore: Math.max(0, gameScore), // –ú–∏–Ω–∏–º—É–º 0 –æ—á–∫–æ–≤
      isBot,
      gameDuration: gameResults.gameDuration || 0
    };
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
  async updatePlayerOverallStats(userId, gameStats, gameResults) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const currentStats = await this.db.getPlayerStats(userId);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
      const ratingChange = this.calculateRatingChange(
        currentStats.rating, 
        gameStats, 
        gameResults.players.length
      );

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsUpdate = {
        // –û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        total_games: currentStats.total_games + 1,
        total_wins: currentStats.total_wins + (gameStats.isWinner ? 1 : 0),
        total_losses: currentStats.total_losses + (gameStats.isWinner ? 0 : 1),
        
        // –ü–æ–∑–∏—Ü–∏–∏
        first_places: currentStats.first_places + (gameStats.position === 1 ? 1 : 0),
        second_places: currentStats.second_places + (gameStats.position === 2 ? 1 : 0),
        third_places: currentStats.third_places + (gameStats.position === 3 ? 1 : 0),
        fourth_places: currentStats.fourth_places + (gameStats.position === 4 ? 1 : 0),
        
        // –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_cards_played: currentStats.total_cards_played + gameStats.cardsPlayed,
        total_penalty_cards: currentStats.total_penalty_cards + gameStats.penaltyCards,
        total_one_card_declarations: currentStats.total_one_card_declarations + gameStats.oneCardDeclarations,
        total_penki_used: currentStats.total_penki_used + (gameStats.penkiUsed ? 1 : 0),
        total_turns: currentStats.total_turns + gameStats.turnsCount,
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_game_time_ms: currentStats.total_game_time_ms + gameStats.gameDuration,
        
        // –†–µ–∫–æ—Ä–¥—ã
        fastest_win_ms: gameStats.isWinner ? 
          Math.min(currentStats.fastest_win_ms || Infinity, gameStats.gameDuration) : 
          currentStats.fastest_win_ms,
        longest_game_ms: Math.max(currentStats.longest_game_ms || 0, gameStats.gameDuration),
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        perfect_games: currentStats.perfect_games + (gameStats.penaltyCards === 0 ? 1 : 0),
        
        // –†–µ–π—Ç–∏–Ω–≥
        rating: Math.max(100, currentStats.rating + ratingChange), // –ú–∏–Ω–∏–º—É–º 100 —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating_games: currentStats.rating_games + 1
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ
      await this.db.updatePlayerStats(userId, statsUpdate);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.checkAchievements(userId, gameStats, statsUpdate);
      
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
      throw error;
    }
  }

  // –í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ELO)
  calculateRatingChange(currentRating, gameStats, playerCount) {
    const baseChange = 25; // –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const K = 32; // K-—Ñ–∞–∫—Ç–æ—Ä –¥–ª—è ELO
    
    // –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–µ (—É–ø—Ä–æ—â–µ–Ω–∏–µ)
    const expectedPosition = 2.5; // –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è 4 –∏–≥—Ä–æ–∫–æ–≤
    const actualPosition = gameStats.position || playerCount;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
    let ratingChange = 0;
    
    if (gameStats.isWinner) {
      // –ü–æ–±–µ–¥–∞
      ratingChange = baseChange + (gameStats.gameScore / 10);
    } else {
      // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —Ä–µ–π—Ç–∏–Ω–≥ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
      const positionPenalty = (actualPosition - 1) * 5;
      ratingChange = -Math.min(baseChange / 2, positionPenalty);
    }
    
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    if (gameStats.penkiUsed) ratingChange += 5; // –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ–Ω—å–∫–æ–≤
    if (gameStats.penaltyCards > 3) ratingChange -= 10; // –®—Ç—Ä–∞—Ñ –∑–∞ –º–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    ratingChange = Math.max(-50, Math.min(50, ratingChange));
    
    return Math.round(ratingChange);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  async checkAchievements(userId, gameStats, overallStats) {
    const achievements = [];
    
    try {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
      if (overallStats.total_wins === 1) {
        achievements.push({
          type: 'first_win',
          name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞!',
          description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –≤ P.I.D.R.',
          data: { gameStats }
        });
      }
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: 10 –ø–æ–±–µ–¥
      if (overallStats.total_wins === 10) {
        achievements.push({
          type: 'ten_wins',
          name: '–í–µ—Ç–µ—Ä–∞–Ω',
          description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä',
          data: { totalWins: overallStats.total_wins }
        });
      }
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (–±–µ–∑ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç)
      if (gameStats.penaltyCards === 0 && gameStats.isWinner) {
        achievements.push({
          type: 'perfect_game',
          name: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞',
          description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –∫–∞—Ä—Ç',
          data: { gameStats }
        });
      }
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ú–∞—Å—Ç–µ—Ä –ø–µ–Ω—å–∫–æ–≤
      if (gameStats.penkiUsed && gameStats.isWinner) {
        achievements.push({
          type: 'penki_master',
          name: '–ú–∞—Å—Ç–µ—Ä –ø–µ–Ω—å–∫–æ–≤',
          description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ–Ω—å–∫–∏',
          data: { gameStats }
        });
      }
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      if (overallStats.rating >= 1500 && currentStats.rating < 1500) {
        achievements.push({
          type: 'high_rating',
          name: '–ü—Ä–æ—Ñ–∏',
          description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ 1500',
          data: { rating: overallStats.rating }
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      for (const achievement of achievements) {
        await this.saveAchievement(userId, achievement);
      }
      
      if (achievements.length > 0) {
        console.log(`üèÜ [PlayerStats] –ü–æ–ª—É—á–µ–Ω–æ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è ${userId}`);
      }
      
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`, error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  async saveAchievement(userId, achievement) {
    try {
      await this.db.run(
        `INSERT OR IGNORE INTO achievements (user_id, achievement_type, achievement_data) 
         VALUES (?, ?, ?)`,
        [userId, achievement.type, JSON.stringify(achievement)]
      );
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:`, error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
  async getPlayerStats(userId) {
    try {
      const stats = await this.db.getPlayerStats(userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
      const achievements = await this.db.all(
        'SELECT * FROM achievements WHERE user_id = ? ORDER BY unlocked_at DESC',
        [userId]
      );
      
      return {
        ...stats,
        achievements: achievements.map(ach => ({
          ...ach,
          achievement_data: JSON.parse(ach.achievement_data || '{}')
        }))
      };
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
  async getGameHistory(userId, limit = 10, offset = 0) {
    try {
      return await this.db.getGameHistory(userId, limit, offset);
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
  async getLeaderboard(limit = 50, orderBy = 'rating') {
    try {
      return await this.db.getLeaderboard(limit, orderBy);
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
  async getPlayersComparison(userIds) {
    try {
      const stats = [];
      
      for (const userId of userIds) {
        const playerStats = await this.getPlayerStats(userId);
        stats.push(playerStats);
      }
      
      return stats;
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–µ—Ä–∏–æ–¥—É
  async getPeriodAnalytics(userId, periodDays = 30) {
    try {
      const sql = `
        SELECT 
          COUNT(*) as games_played,
          SUM(CASE WHEN position = 1 THEN 1 ELSE 0 END) as wins,
          AVG(game_score) as avg_score,
          SUM(penalty_cards) as total_penalties,
          AVG(g.duration_ms) as avg_duration
        FROM game_participations gp
        JOIN games g ON gp.game_id = g.id
        WHERE gp.user_id = ? 
          AND g.started_at >= datetime('now', '-${periodDays} days')
      `;
      
      const analytics = await this.db.get(sql, [userId]);
      return analytics;
    } catch (error) {
      console.error(`‚ùå [PlayerStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:`, error);
      throw error;
    }
  }
}

module.exports = PlayerStatsManager;
