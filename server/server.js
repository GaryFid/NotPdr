const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const Database = require('./database');
const GameRoomManager = require('./gameRoomManager');
const PlayerStatsManager = require('./playerStatsManager');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Express
app.use(cors({
  origin: process.env.CORS_ORIGIN || ['http://localhost:3000', 'https://t.me'],
  credentials: true
}));

app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const io = socketIo(server, {
  path: '/api/socket',
  cors: {
    origin: process.env.CORS_ORIGIN || ['http://localhost:3000', 'https://t.me'],
    methods: ['GET', 'POST'],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const db = new Database();
const gameRoomManager = new GameRoomManager();
const playerStatsManager = new PlayerStatsManager(db);

const PORT = process.env.PORT || 3001;

// ===== WEBSOCKET –°–û–ë–´–¢–ò–Ø =====

io.on('connection', (socket) => {
  console.log(`üîå [WebSocket Server] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join-room', async (roomId, userId) => {
    try {
      console.log(`üë• [WebSocket Server] –ò–≥—Ä–æ–∫ ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
      
      const room = gameRoomManager.joinRoom(roomId, userId, socket.id);
      socket.join(roomId);
      socket.userId = userId;
      socket.roomId = roomId;

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
      io.to(roomId).emit('player-joined', {
        userId,
        socketId: socket.id,
        roomInfo: room.getInfo()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
      socket.emit('room-state', room.getInfo());

      console.log(`‚úÖ [WebSocket Server] –ò–≥—Ä–æ–∫ ${userId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:`, error);
      socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });

  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
  socket.on('leave-room', (roomId, userId) => {
    try {
      console.log(`üë• [WebSocket Server] –ò–≥—Ä–æ–∫ ${userId} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
      
      gameRoomManager.leaveRoom(roomId, userId);
      socket.leave(roomId);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      io.to(roomId).emit('player-left', {
        userId,
        socketId: socket.id
      });

      socket.userId = null;
      socket.roomId = null;
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:`, error);
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  socket.on('game-state-update', (roomId, gameState) => {
    try {
      console.log(`üéÆ [WebSocket Server] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
      
      const room = gameRoomManager.getRoom(roomId);
      if (room) {
        room.updateGameState(gameState);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        socket.to(roomId).emit('game-state-sync', gameState);
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:`, error);
    }
  });

  // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
  socket.on('player-move', (roomId, moveData) => {
    try {
      console.log(`üéØ [WebSocket Server] –•–æ–¥ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, moveData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      socket.to(roomId).emit('player-move-sync', moveData);
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞:`, error);
    }
  });

  // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
  socket.on('player-ready', (roomId, readyData) => {
    try {
      console.log(`‚úÖ [WebSocket Server] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ ${readyData.userId}: ${readyData.isReady}`);
      
      const room = gameRoomManager.getRoom(roomId);
      if (room) {
        room.setPlayerReady(readyData.userId, readyData.isReady);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        io.to(roomId).emit('player-ready-sync', readyData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∫ –∏–≥—Ä–µ
        if (room.areAllPlayersReady() && room.players.size >= 4) {
          console.log(`üöÄ [WebSocket Server] –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É!`);
          
          const gameSettings = {
            playerCount: room.players.size,
            roomId: roomId,
            startTime: Date.now()
          };
          
          room.startGame(gameSettings);
          io.to(roomId).emit('game-started', gameSettings);
        }
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:`, error);
    }
  });

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  socket.on('start-game', (roomId, gameSettings) => {
    try {
      console.log(`üöÄ [WebSocket Server] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
      
      const room = gameRoomManager.getRoom(roomId);
      if (room) {
        room.startGame(gameSettings);
        io.to(roomId).emit('game-started', gameSettings);
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:`, error);
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('end-game', async (roomId, results) => {
    try {
      console.log(`üèÅ [WebSocket Server] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, results);
      
      const room = gameRoomManager.getRoom(roomId);
      if (room) {
        room.endGame(results);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        await playerStatsManager.saveGameResults(roomId, results);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('game-ended', results);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        room.resetPlayersReady();
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:`, error);
    }
  });

  // –ß–∞—Ç –≤ –∏–≥—Ä–µ
  socket.on('game-chat', (roomId, message) => {
    try {
      console.log(`üí¨ [WebSocket Server] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('game-chat-message', message);
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ —á–∞—Ç–∞:`, error);
    }
  });

  // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞
  socket.on('invite-friend', (invitationData) => {
    try {
      console.log(`üíå [WebSocket Server] –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞:`, invitationData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω)
      const targetSocket = findSocketByUserId(invitationData.friendId);
      if (targetSocket) {
        targetSocket.emit('friend-invitation', invitationData);
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:`, error);
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
  socket.on('disconnect', (reason) => {
    console.log(`üîå [WebSocket Server] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ ${socket.id}: ${reason}`);
    
    if (socket.roomId && socket.userId) {
      try {
        gameRoomManager.leaveRoom(socket.roomId, socket.userId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.to(socket.roomId).emit('player-left', {
          userId: socket.userId,
          socketId: socket.id
        });
      } catch (error) {
        console.error(`‚ùå [WebSocket Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:`, error);
      }
    }
  });
});

// ===== HTTP API –≠–ù–î–ü–û–ò–ù–¢–´ =====

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
app.post('/api/rooms/create', (req, res) => {
  try {
    const { hostUserId, maxPlayers = 4 } = req.body;
    
    if (!hostUserId) {
      return res.status(400).json({ error: 'hostUserId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const roomId = uuidv4();
    const roomCode = Math.random().toString(36).substring(2, 8).toUpperCase();
    
    const room = gameRoomManager.createRoom(roomId, hostUserId, maxPlayers);
    room.roomCode = roomCode;

    console.log(`üè† [HTTP API] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomId} (–∫–æ–¥: ${roomCode})`);

    res.json({
      roomId,
      roomCode,
      maxPlayers,
      hostUserId
    });
  } catch (error) {
    console.error(`‚ùå [HTTP API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:`, error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ –∫–æ–¥—É
app.post('/api/rooms/join', (req, res) => {
  try {
    const { roomCode, userId } = req.body;
    
    if (!roomCode || !userId) {
      return res.status(400).json({ error: 'roomCode –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const room = gameRoomManager.findRoomByCode(roomCode);
    if (!room) {
      return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (room.players.size >= room.maxPlayers) {
      return res.status(400).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
    }

    console.log(`üö™ [HTTP API] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ ${room.id} –ø–æ –∫–æ–¥—É ${roomCode}`);

    res.json({
      roomId: room.id,
      roomCode: room.roomCode,
      maxPlayers: room.maxPlayers,
      currentPlayers: room.players.size,
      hostUserId: room.hostUserId
    });
  } catch (error) {
    console.error(`‚ùå [HTTP API] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:`, error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
app.get('/api/stats/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const stats = await playerStatsManager.getPlayerStats(userId);
    
    res.json(stats);
  } catch (error) {
    console.error(`‚ùå [HTTP API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –∏–≥—Ä–æ–∫–∞
app.get('/api/history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { limit = 10, offset = 0 } = req.query;
    
    const history = await playerStatsManager.getGameHistory(userId, parseInt(limit), parseInt(offset));
    
    res.json(history);
  } catch (error) {
    console.error(`‚ùå [HTTP API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:`, error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
app.get('/api/leaderboard', async (req, res) => {
  try {
    const { limit = 50 } = req.query;
    const leaderboard = await playerStatsManager.getLeaderboard(parseInt(limit));
    
    res.json(leaderboard);
  } catch (error) {
    console.error(`‚ùå [HTTP API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:`, error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    uptime: process.uptime(),
    timestamp: Date.now(),
    activeRooms: gameRoomManager.getRoomCount(),
    connectedClients: io.sockets.sockets.size
  });
});

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

function findSocketByUserId(userId) {
  for (const [id, socket] of io.sockets.sockets) {
    if (socket.userId === userId) {
      return socket;
    }
  }
  return null;
}

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====

server.listen(PORT, () => {
  console.log(`üöÄ [P.I.D.R. Server] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîå [P.I.D.R. Server] WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏ /api/socket`);
  console.log(`üì° [P.I.D.R. Server] HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /api/*`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë [P.I.D.R. Server] –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  server.close(() => {
    console.log('‚úÖ [P.I.D.R. Server] –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
