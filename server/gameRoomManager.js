class GameRoom {
  constructor(id, hostUserId, maxPlayers = 4) {
    this.id = id;
    this.hostUserId = hostUserId;
    this.maxPlayers = maxPlayers;
    this.roomCode = null;
    this.players = new Map(); // userId -> { socketId, isReady, joinTime }
    this.gameState = null;
    this.gameInProgress = false;
    this.gameStartTime = null;
    this.gameEndTime = null;
    this.createdAt = new Date();
    this.lastActivity = new Date();
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
  addPlayer(userId, socketId) {
    if (this.players.size >= this.maxPlayers) {
      throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    }

    if (this.gameInProgress) {
      throw new Error('–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç');
    }

    this.players.set(userId, {
      socketId,
      isReady: false,
      joinTime: new Date(),
      isHost: userId === this.hostUserId
    });

    this.updateActivity();
    console.log(`‚úÖ [GameRoom ${this.id}] –ò–≥—Ä–æ–∫ ${userId} –¥–æ–±–∞–≤–ª–µ–Ω (${this.players.size}/${this.maxPlayers})`);
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
  removePlayer(userId) {
    const removed = this.players.delete(userId);
    
    if (removed) {
      this.updateActivity();
      console.log(`‚ûñ [GameRoom ${this.id}] –ò–≥—Ä–æ–∫ ${userId} —É–¥–∞–ª–µ–Ω (${this.players.size}/${this.maxPlayers})`);
    }

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
    if (userId === this.hostUserId && this.players.size > 0) {
      const firstPlayer = this.players.keys().next().value;
      this.hostUserId = firstPlayer;
      this.players.get(firstPlayer).isHost = true;
      console.log(`üëë [GameRoom ${this.id}] –ù–æ–≤—ã–π —Ö–æ—Å—Ç: ${firstPlayer}`);
    }

    return removed;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
  setPlayerReady(userId, isReady) {
    const player = this.players.get(userId);
    if (player) {
      player.isReady = isReady;
      this.updateActivity();
      console.log(`üéØ [GameRoom ${this.id}] –ò–≥—Ä–æ–∫ ${userId} –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${isReady}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  areAllPlayersReady() {
    if (this.players.size < 4) {
      return false; // –ú–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ –¥–ª—è P.I.D.R.
    }

    for (const player of this.players.values()) {
      if (!player.isReady) {
        return false;
      }
    }
    return true;
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  resetPlayersReady() {
    for (const player of this.players.values()) {
      player.isReady = false;
    }
    this.updateActivity();
    console.log(`üîÑ [GameRoom ${this.id}] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞`);
  }

  // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  startGame(gameSettings) {
    if (this.gameInProgress) {
      throw new Error('–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç');
    }

    if (this.players.size < 4) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 4)');
    }

    this.gameInProgress = true;
    this.gameStartTime = new Date();
    this.gameState = {
      ...gameSettings,
      roomId: this.id,
      startTime: this.gameStartTime,
      playersCount: this.players.size
    };

    this.updateActivity();
    console.log(`üöÄ [GameRoom ${this.id}] –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å ${this.players.size} –∏–≥—Ä–æ–∫–∞–º–∏`);
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
  endGame(results) {
    if (!this.gameInProgress) {
      throw new Error('–ò–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç');
    }

    this.gameInProgress = false;
    this.gameEndTime = new Date();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
    if (this.gameStartTime) {
      results.gameDuration = this.gameEndTime - this.gameStartTime;
    }

    this.updateActivity();
    console.log(`üèÅ [GameRoom ${this.id}] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${results.gameDuration}ms`);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  updateGameState(gameState) {
    this.gameState = { ...this.gameState, ...gameState };
    this.updateActivity();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  updateActivity() {
    this.lastActivity = new Date();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  isExpired(timeoutMinutes = 30) {
    const now = new Date();
    const diffMinutes = (now - this.lastActivity) / (1000 * 60);
    return diffMinutes > timeoutMinutes;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
  getInfo() {
    return {
      id: this.id,
      roomCode: this.roomCode,
      hostUserId: this.hostUserId,
      maxPlayers: this.maxPlayers,
      currentPlayers: this.players.size,
      gameInProgress: this.gameInProgress,
      gameState: this.gameState,
      players: Array.from(this.players.entries()).map(([userId, playerData]) => ({
        userId,
        socketId: playerData.socketId,
        isReady: playerData.isReady,
        isHost: playerData.isHost,
        joinTime: playerData.joinTime
      })),
      createdAt: this.createdAt,
      lastActivity: this.lastActivity,
      canStart: this.areAllPlayersReady()
    };
  }
}

class GameRoomManager {
  constructor() {
    this.rooms = new Map(); // roomId -> GameRoom
    this.roomCodes = new Map(); // roomCode -> roomId
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
    this.cleanupInterval = setInterval(() => {
      this.cleanup();
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  createRoom(roomId, hostUserId, maxPlayers = 4) {
    if (this.rooms.has(roomId)) {
      throw new Error('–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const room = new GameRoom(roomId, hostUserId, maxPlayers);
    this.rooms.set(roomId, room);

    console.log(`üè† [GameRoomManager] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomId} (—Ö–æ—Å—Ç: ${hostUserId})`);
    
    return room;
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  joinRoom(roomId, userId, socketId) {
    let room = this.rooms.get(roomId);
    
    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!room) {
      room = this.createRoom(roomId, userId);
    }

    room.addPlayer(userId, socketId);
    return room;
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  leaveRoom(roomId, userId) {
    const room = this.rooms.get(roomId);
    if (!room) {
      return false;
    }

    const removed = room.removePlayer(userId);
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    if (room.players.size === 0) {
      this.deleteRoom(roomId);
    }

    return removed;
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
  deleteRoom(roomId) {
    const room = this.rooms.get(roomId);
    if (room && room.roomCode) {
      this.roomCodes.delete(room.roomCode);
    }
    
    const deleted = this.rooms.delete(roomId);
    if (deleted) {
      console.log(`üóëÔ∏è [GameRoomManager] –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞`);
    }
    
    return deleted;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
  getRoom(roomId) {
    return this.rooms.get(roomId);
  }

  // –ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–æ–¥—É
  findRoomByCode(roomCode) {
    for (const room of this.rooms.values()) {
      if (room.roomCode === roomCode.toUpperCase()) {
        return room;
      }
    }
    return null;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
  setRoomCode(roomId, roomCode) {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    const existingRoom = this.findRoomByCode(roomCode);
    if (existingRoom && existingRoom.id !== roomId) {
      throw new Error('–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –µ—Å–ª–∏ –±—ã–ª
    if (room.roomCode) {
      this.roomCodes.delete(room.roomCode);
    }

    room.roomCode = roomCode.toUpperCase();
    this.roomCodes.set(room.roomCode, roomId);

    console.log(`üîë [GameRoomManager] –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã ${roomId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${room.roomCode}`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
  getRoomCount() {
    return this.rooms.size;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    let totalPlayers = 0;
    let activeGames = 0;
    
    for (const room of this.rooms.values()) {
      totalPlayers += room.players.size;
      if (room.gameInProgress) {
        activeGames++;
      }
    }

    return {
      totalRooms: this.rooms.size,
      totalPlayers,
      activeGames,
      timestamp: new Date()
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
  cleanup() {
    let cleanedCount = 0;
    
    for (const [roomId, room] of this.rooms.entries()) {
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∫–æ–º–Ω–∞—Ç—ã —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (room.players.size === 0 || room.isExpired()) {
        this.deleteRoom(roomId);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ [GameRoomManager] –û—á–∏—â–µ–Ω–æ ${cleanedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getAllRooms() {
    return Array.from(this.rooms.values()).map(room => room.getInfo());
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }
    this.rooms.clear();
    this.roomCodes.clear();
  }
}

module.exports = GameRoomManager;
