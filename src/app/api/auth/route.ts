import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { verifyTelegramInitData } from '../../../lib/telegram';
import { z } from 'zod';

const JWT_SECRET = process.env.JWT_SECRET;
const BOT_TOKEN = process.env.BOT_TOKEN;

const LocalAuthSchema = z.object({
  type: z.literal('local'),
  username: z.string().min(1).max(64),
  password: z.string().min(6).max(128),
});

const TelegramAuthSchema = z.object({
  type: z.literal('telegram'),
  id: z.union([z.string(), z.number()]),
  username: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  photo_url: z.string().optional(),
  initData: z.string().optional(),
});

export async function GET(req: NextRequest) {
  console.log('üîç GET Auth API - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const { searchParams } = new URL(req.url);
  const userId = searchParams.get('userId');
  
  if (!userId) {
    return NextResponse.json({ 
      success: false, 
      message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    }, { status: 400 });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
  const authHeader = req.headers.get('authorization');
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return NextResponse.json({ 
      success: false, 
      message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
    }, { status: 401 });
  }

  const token = authHeader.split(' ')[1];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    if (!JWT_SECRET) {
      throw new Error('JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', decoded.userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    const useSupabase = !!(supabaseUrl && supabaseKey);
    
    if (useSupabase) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Supabase
      const { data: user, error } = await supabase
        .from('_pidr_users')
        .select('id, username, email, telegramId, firstName, lastName, photoUrl, coins, rating, gamesPlayed, gamesWon, createdAt')
        .or(`id.eq.${userId},telegramId.eq.${userId}`)
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' 
        }, { status: 404 });
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Supabase:', user);
      
      return NextResponse.json({
        success: true,
        user: {
          id: user.id,
          username: user.username,
          email: user.email,
          telegramId: user.telegramId,
          firstName: user.firstName,
          lastName: user.lastName,
          photoUrl: user.photoUrl,
          coins: user.coins || 1000,
          rating: user.rating || 0,
          gamesPlayed: user.gamesPlayed || 0,
          gamesWon: user.gamesWon || 0,
          createdAt: user.createdAt
        }
      });
    } else {
      console.warn('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return NextResponse.json({
        success: true,
        user: {
          id: userId,
          username: `user_${userId}`,
          coins: 1000,
          rating: 0,
          gamesPlayed: 0,
          gamesWon: 0
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
    }, { status: 401 });
  }
}

export async function PUT(req: NextRequest) {
  console.log('üîÑ UPDATE Auth API - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞');
  
  try {
    const body = await req.json();
    
    if (body.type !== 'telegram' || !body.id) {
      return NextResponse.json({ 
        success: false, 
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram —Ç–∏–ø –∏ ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' 
      }, { status: 400 });
    }
    
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    const useSupabase = !!(supabaseUrl && supabaseKey);
    
    if (useSupabase) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase
      const { data: updatedUser, error } = await supabase
        .from('_pidr_users')
        .update({
          coins: body.coins,
          rating: body.rating,
          games_played: body.games_played,
          games_won: body.games_won,
          photo_url: body.photo_url,
          updated_at: new Date().toISOString()
        })
        .eq('telegram_id', body.id)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Supabase:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' 
        }, { status: 500 });
      }
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Supabase:', updatedUser);
      return NextResponse.json({
        success: true,
        user: updatedUser,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
      });
    } else {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      return NextResponse.json({
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ UPDATE API:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' 
    }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  console.log('üöÄ SUPABASE Auth API –≤—ã–∑–≤–∞–Ω');
  
  if (!JWT_SECRET) {
    console.error('‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: JWT_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
    }, { status: 500 });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;
  
  const useSupabase = !!(supabaseUrl && supabaseKey);
  
  if (!useSupabase) {
    console.warn('‚ö†Ô∏è Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
  }

  let body: any;
  try {
    body = await req.json();
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(body, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' 
    }, { status: 400 });
  }

  if (!body || typeof body.type !== 'string') {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞' 
    }, { status: 400 });
  }

  // 1. –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  if (body.type === 'local') {
    console.log('üë§ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    const parsed = LocalAuthSchema.safeParse(body);
    if (!parsed.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', parsed.error);
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞' 
      }, { status: 400 });
    }

    const { username, password } = parsed.data;

    // FALLBACK: –ï—Å–ª–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (!useSupabase) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–±–µ–∑ Supabase)');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
      const tempUser = {
        id: `temp_${Date.now()}`,
        username,
        firstName: username,
        lastName: '',
        avatar: null,
        coins: 1000,
        rating: 1000,
        gamesPlayed: 0,
        gamesWon: 0,
        referralCode: 'TEMP' + Date.now().toString().slice(-4)
      };

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        { 
          userId: tempUser.id, 
          username: tempUser.username,
          type: 'local_temp'
        },
        JWT_SECRET,
        { expiresIn: '30d' }
      );

      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', tempUser.username);

      return NextResponse.json({
        success: true,
        token,
        user: tempUser,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! (–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)',
        warning: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.'
      });
    }

    try {
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', username);

      const { data: users, error } = await supabase
        .from('_pidr_users')
        .select('id, username, firstName, lastName, avatar, passwordHash, coins, rating, gamesPlayed, gamesWon, referralCode')
        .eq('username', username)
        .limit(1);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          details: error.message 
        }, { status: 500 });
      }

      const user = users && users[0];
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', username);
        return NextResponse.json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        }, { status: 404 });
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.username);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ö—ç—à)
      if (user.passwordHash) {
        const isValidPassword = await bcrypt.compare(password, user.passwordHash);
        if (!isValidPassword) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', username);
          return NextResponse.json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
          }, { status: 401 });
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await supabase
          .from('_pidr_user_status')
          .upsert({
            user_id: user.id,
            status: 'online',
            last_seen: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });
      } catch (statusError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', statusError);
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        { 
          userId: user.id, 
          username: user.username,
          type: 'local'
        },
        JWT_SECRET,
        { expiresIn: '30d' }
      );

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.username);

      return NextResponse.json({
        success: true,
        token,
        user: {
          id: user.id,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          avatar: user.avatar,
          coins: user.coins || 1000,
          rating: user.rating || 1000,
          gamesPlayed: user.gamesPlayed || 0,
          gamesWon: user.gamesWon || 0,
          referralCode: user.referralCode
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!'
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
      }, { status: 500 });
    }
  }

  // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
  if (body.type === 'telegram') {
    console.log('üì± Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    const parsed = TelegramAuthSchema.safeParse(body);
    if (!parsed.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', parsed.error);
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ' 
      }, { status: 400 });
    }

    const { id, username, first_name, last_name, photo_url, initData } = parsed.data;
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', { id, username, first_name, last_name });

    // FALLBACK: –ï—Å–ª–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (!useSupabase) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Telegram (–±–µ–∑ Supabase)');
      
      const tempUser = {
        id: `temp_tg_${id}`,
        telegramId: id.toString(),
        username: username || first_name || `tg_user_${id}`,
        firstName: first_name || '',
        lastName: last_name || '',
        avatar: photo_url,
        coins: 1000,
        rating: 1000,
        gamesPlayed: 0,
        gamesWon: 0,
        referralCode: 'TG' + Date.now().toString().slice(-4)
      };

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        { 
          userId: tempUser.id, 
          telegramId: tempUser.telegramId,
          username: tempUser.username,
          type: 'telegram_temp'
        },
        JWT_SECRET,
        { expiresIn: '30d' }
      );

      console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', tempUser.username);

      return NextResponse.json({
        success: true,
        token,
        user: tempUser,
        message: '–£—Å–ø–µ—à–Ω—ã–π Telegram –≤—Ö–æ–¥! (–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)',
        warning: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å BOT_TOKEN)
    if (BOT_TOKEN && initData && initData !== 'demo_init_data') {
      try {
        if (!verifyTelegramInitData(initData, BOT_TOKEN)) {
          console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ Telegram init –¥–∞–Ω–Ω—ã–µ');
          return NextResponse.json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ' 
          }, { status: 401 });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö' 
        }, { status: 401 });
      }
    } else {
      console.warn('‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –¥–µ–º–æ —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
    }

    const idStr = id.toString();

    try {
      console.log('üîç –ü–æ–∏—Å–∫ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', idStr);

      const { data: users, error } = await supabase
        .from('_pidr_users')
        .select('id, username, firstName, lastName, avatar, telegramId, referralCode, coins, rating, gamesPlayed, gamesWon')
        .eq('telegramId', idStr)
        .limit(1);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          details: error.message 
        }, { status: 500 });
      }

      let user = users && users[0];
      
      if (!user) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID:', idStr);
        console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', { username, first_name, last_name, photo_url });

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ referralCode
        let referralCode = null;
        let attempts = 0;
        while (attempts < 5) {
          referralCode = Math.random().toString(36).substring(2, 8).toUpperCase();
          const { data: existingCode } = await supabase
            .from('_pidr_users')
            .select('id')
            .eq('referralCode', referralCode)
            .limit(1);
          
          if (!existingCode || existingCode.length === 0) break;
          attempts++;
        }

        const newUserData = {
          telegramId: idStr,
          username: username || first_name || `user${idStr}`,
          firstName: first_name || '',
          lastName: last_name || '',
          avatar: photo_url,
          authType: 'telegram',
          coins: 1000,
          rating: 1000,
          gamesPlayed: 0,
          gamesWon: 0,
          referralCode: referralCode || 'TG' + Date.now().toString().slice(-4)
        };

        const { data: newUser, error: createError } = await supabase
          .from('_pidr_users')
          .insert([newUserData])
          .select()
          .single();

        if (createError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
          console.error('üìã –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞–ª–∏—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å:', newUserData);
          return NextResponse.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            details: createError.message 
          }, { status: 500 });
        }

        user = newUser;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
        console.log('üÜî ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
        console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await supabase
            .from('_pidr_user_status')
            .insert({
              user_id: user.id,
              status: 'online',
              last_seen: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
        } catch (statusError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', statusError);
        }

        // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø HD –ö–û–®–ï–õ–¨–ö–ê –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üí≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HD –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        try {
          const { HDWalletService } = await import('../../../lib/wallets/hd-wallet-service');
          const walletService = new HDWalletService();
          
          const supportedCoins = ['TON', 'BTC', 'ETH', 'USDT_TRC20', 'SOL'];
          
          for (const coin of supportedCoins) {
            try {
              const hdAddress = await walletService.generateUserAddress(user.id, coin);
              if (hdAddress) {
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${coin} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await supabase
                  .from('_pidr_hd_addresses')
                  .insert({
                    user_id: user.id,
                    coin: hdAddress.coin,
                    address: hdAddress.address,
                    derivation_path: hdAddress.derivationPath,
                    address_index: hdAddress.index,
                    created_at: new Date().toISOString()
                  });
              }
            } catch (coinError) {
              console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${coin} –∞–¥—Ä–µ—Å:`, coinError);
            }
          }
        } catch (walletError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HD –∫–æ—à–µ–ª–µ–∫:', walletError);
        }
      } else {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updateData: any = {};
        if (first_name && first_name !== user.firstName) updateData.firstName = first_name;
        if (last_name && last_name !== user.lastName) updateData.lastName = last_name;
        if (photo_url && photo_url !== user.avatar) updateData.avatar = photo_url;

        if (Object.keys(updateData).length > 0) {
          await supabase
            .from('_pidr_users')
            .update(updateData)
            .eq('id', user.id);
          
          Object.assign(user, updateData);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        try {
          await supabase
            .from('_pidr_user_status')
            .upsert({
              user_id: user.id,
              status: 'online',
              last_seen: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
        } catch (statusError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', statusError);
        }

        // üî• –ü–†–û–í–ï–†–ö–ê –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø HD –ö–û–®–ï–õ–¨–ö–ê –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º HD –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        try {
          const { data: existingAddresses } = await supabase
            .from('_pidr_hd_addresses')
            .select('coin')
            .eq('user_id', user.id);

          const supportedCoins = ['TON', 'BTC', 'ETH', 'USDT_TRC20', 'SOL'];
          const existingCoins = existingAddresses?.map((addr: any) => addr.coin) || [];
          const missingCoins = supportedCoins.filter(coin => !existingCoins.includes(coin));

          if (missingCoins.length > 0) {
            console.log(`üí≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${user.username}: ${missingCoins.join(', ')}`);
            
            const { HDWalletService } = await import('../../../lib/wallets/hd-wallet-service');
            const walletService = new HDWalletService();
            
            for (const coin of missingCoins) {
              try {
                const hdAddress = await walletService.generateUserAddress(user.id, coin);
                if (hdAddress) {
                  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π ${coin} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
                  
                  await supabase
                    .from('_pidr_hd_addresses')
                    .insert({
                      user_id: user.id,
                      coin: hdAddress.coin,
                      address: hdAddress.address,
                      derivation_path: hdAddress.derivationPath,
                      address_index: hdAddress.index,
                      created_at: new Date().toISOString()
                    });
                }
              } catch (coinError) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${coin} –∞–¥—Ä–µ—Å:`, coinError);
              }
            }
          } else {
            console.log('‚úÖ HD –∫–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç');
          }
        } catch (walletError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HD –∫–æ—à–µ–ª—å–∫–∞:', walletError);
        }
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        { 
          userId: user.id, 
          telegramId: user.telegramId,
          username: user.username,
          type: 'telegram'
        },
        JWT_SECRET,
        { expiresIn: '30d' }
      );

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.username);

      return NextResponse.json({
        success: true,
        token,
        user: {
          id: user.id,
          telegramId: user.telegramId,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          avatar: user.avatar,
          coins: user.coins,
          rating: user.rating,
          gamesPlayed: user.gamesPlayed,
          gamesWon: user.gamesWon,
          referralCode: user.referralCode
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π Telegram –≤—Ö–æ–¥!'
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
      }, { status: 500 });
    }
  }

  return NextResponse.json({ 
    success: false, 
    message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
  }, { status: 400 });
}
