// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π
import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import { SessionManager } from '../../../lib/auth/session-manager';

function getClientInfo(req: NextRequest) {
  const ip = req.headers.get('x-forwarded-for') || 
             req.headers.get('x-real-ip') || 
             'unknown';
  const userAgent = req.headers.get('user-agent') || 'unknown';
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–∑ User-Agent
  const deviceInfo = {
    userAgent,
    timestamp: new Date().toISOString(),
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  };

  return { ip, userAgent, deviceInfo };
}

export async function POST(req: NextRequest) {
  console.log('üöÄ SESSION-BASED Auth API –≤—ã–∑–≤–∞–Ω');

  try {
    const body = await req.json();
    const clientInfo = getClientInfo(req);

    if (!body || typeof body.type !== 'string') {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞' 
      }, { status: 400 });
    }

    // 1. –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (username/password)
    if (body.type === 'local') {
      const { username, password } = body;

      if (!username || !password) {
        return NextResponse.json({ 
          success: false, 
          message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        }, { status: 400 });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: users, error: userError } = await supabase
        .from('_pidr_users')
        .select('*')
        .or(`username.eq.${username},email.eq.${username}`)
        .limit(1);

      if (userError || !users || users.length === 0) {
        await SessionManager.logAuthAction({
          userId: 'unknown',
          action: 'login',
          authType: 'local',
          ipAddress: clientInfo.ip,
          userAgent: clientInfo.userAgent,
          success: false,
          errorMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });

        return NextResponse.json({ 
          success: false, 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        }, { status: 401 });
      }

      const user = users[0];

      // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionResult = await SessionManager.createSession(
        user.id.toString(),
        'local',
        user,
        clientInfo
      );

      if (!sessionResult) {
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏' 
        }, { status: 500 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('_pidr_user_status')
        .upsert({
          user_id: user.id,
          status: 'online',
          last_seen: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.username);

      return NextResponse.json({
        success: true,
        token: sessionResult.token,
        sessionId: sessionResult.sessionId,
        user: {
          id: user.id,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          avatar: user.avatar,
          coins: user.coins || 1000,
          rating: user.rating || 1000,
          gamesPlayed: user.gamesPlayed || 0,
          gamesWon: user.gamesWon || 0,
          referralCode: user.referralCode
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!'
      });
    }

    // 2. Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (body.type === 'telegram') {
      const { id, username, first_name, last_name, photo_url } = body;

      if (!id) {
        return NextResponse.json({ 
          success: false, 
          message: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        }, { status: 400 });
      }

      const telegramId = id.toString();

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let { data: users, error: findError } = await supabase
        .from('_pidr_users')
        .select('*')
        .eq('telegram_id', telegramId);

      if (findError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', findError);
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        }, { status: 500 });
      }

      let user;

      if (!users || users.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserData = {
          telegram_id: telegramId,
          username: username || first_name || `user${telegramId}`,
          first_name: first_name || '',
          last_name: last_name || '',
          avatar_url: photo_url || null,
          coins: 1000,
          rating: 1000,
          games_played: 0,
          games_won: 0,
          created_at: new Date().toISOString()
        };

        const { data: newUser, error: createError } = await supabase
          .from('_pidr_users')
          .insert([newUserData])
          .select()
          .single();

        if (createError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
          
          await SessionManager.logAuthAction({
            userId: telegramId,
            action: 'login',
            authType: 'telegram',
            ipAddress: clientInfo.ip,
            userAgent: clientInfo.userAgent,
            success: false,
            errorMessage: createError.message
          });

          return NextResponse.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
          }, { status: 500 });
        }

        user = newUser;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);

      } else {
        user = users[0];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updateData: any = {};
        if (first_name && first_name !== user.first_name) updateData.first_name = first_name;
        if (last_name && last_name !== user.last_name) updateData.last_name = last_name;
        if (photo_url && photo_url !== user.avatar_url) updateData.avatar_url = photo_url;
        if (username && username !== user.username) updateData.username = username;

        if (Object.keys(updateData).length > 0) {
          updateData.updated_at = new Date().toISOString();
          
          const { error: updateError } = await supabase
            .from('_pidr_users')
            .update(updateData)
            .eq('id', user.id);

          if (!updateError) {
            Object.assign(user, updateData);
          }
        }

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
      }

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionResult = await SessionManager.createSession(
        user.id.toString(),
        'telegram',
        user,
        clientInfo
      );

      if (!sessionResult) {
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏' 
        }, { status: 500 });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('_pidr_user_status')
        .upsert({
          user_id: user.id,
          status: 'online',
          last_seen: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.username);

      return NextResponse.json({
        success: true,
        token: sessionResult.token,
        sessionId: sessionResult.sessionId,
        user: {
          id: user.id,
          telegramId: user.telegram_id,
          username: user.username,
          firstName: user.first_name,
          lastName: user.last_name,
          avatar: user.avatar_url,
          coins: user.coins || 1000,
          rating: user.rating || 1000,
          gamesPlayed: user.games_played || 0,
          gamesWon: user.games_won || 0,
          referralCode: user.referral_code
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π Telegram –≤—Ö–æ–¥!'
      });
    }

    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
    }, { status: 400 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
    }, { status: 500 });
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
export async function GET(req: NextRequest) {
  const authHeader = req.headers.get('authorization');
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return NextResponse.json({ 
      success: false, 
      message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
    }, { status: 401 });
  }

  const token = authHeader.substring(7);
  const validation = await SessionManager.validateSession(token);

  if (!validation.valid) {
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è' 
    }, { status: 401 });
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error } = await supabase
    .from('_pidr_users')
    .select('*')
    .eq('id', validation.userId)
    .single();

  if (error || !user) {
    return NextResponse.json({ 
      success: false, 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    }, { status: 404 });
  }

  return NextResponse.json({
    success: true,
    user: {
      id: user.id,
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      avatar: user.avatar_url,
      coins: user.coins,
      rating: user.rating,
      gamesPlayed: user.games_played,
      gamesWon: user.games_won
    },
    sessionId: validation.sessionId,
    message: '–°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
  });
}

// DELETE - –≤—ã—Ö–æ–¥ (–æ—Ç–∑—ã–≤ —Å–µ—Å—Å–∏–∏)
export async function DELETE(req: NextRequest) {
  const authHeader = req.headers.get('authorization');
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return NextResponse.json({ 
      success: false, 
      message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
    }, { status: 401 });
  }

  const token = authHeader.substring(7);
  const validation = await SessionManager.validateSession(token);

  if (!validation.valid || !validation.sessionId) {
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è' 
    }, { status: 401 });
  }

  const success = await SessionManager.revokeSession(validation.sessionId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');

  if (success) {
    return NextResponse.json({
      success: true,
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } else {
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' 
    }, { status: 500 });
  }
}
