// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
import { NextRequest, NextResponse } from 'next/server';
import { SessionManager } from '../../../../lib/auth/session-manager';

function getUserIdFromRequest(req: NextRequest): Promise<string | null> {
  return new Promise(async (resolve) => {
    const authHeader = req.headers.get('authorization');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      resolve(null);
      return;
    }

    const token = authHeader.substring(7);
    const validation = await SessionManager.validateSession(token);
    
    resolve(validation.valid ? validation.userId || null : null);
  });
}

// GET /api/auth/sessions - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: NextRequest) {
  const userId = await getUserIdFromRequest(req);
  
  if (!userId) {
    return NextResponse.json({ 
      success: false, 
      message: 'Unauthorized' 
    }, { status: 401 });
  }

  try {
    const sessions = await SessionManager.getUserActiveSessions(userId);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedSessions = sessions.map(session => ({
      id: session.sessionId,
      deviceInfo: session.deviceInfo,
      ipAddress: session.ipAddress,
      userAgent: session.userAgent,
      expiresAt: session.expiresAt,
      isCurrent: false // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    }));

    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${sessions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    return NextResponse.json({
      success: true,
      sessions: formattedSessions,
      total: formattedSessions.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' 
    }, { status: 500 });
  }
}

// DELETE /api/auth/sessions/:sessionId - –û—Ç–æ–∑–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
export async function DELETE(req: NextRequest) {
  const userId = await getUserIdFromRequest(req);
  
  if (!userId) {
    return NextResponse.json({ 
      success: false, 
      message: 'Unauthorized' 
    }, { status: 401 });
  }

  try {
    const { searchParams } = new URL(req.url);
    const sessionId = searchParams.get('sessionId');
    const revokeAll = searchParams.get('all') === 'true';

    if (revokeAll) {
      // –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
      const sessions = await SessionManager.getUserActiveSessions(userId);
      let revokedCount = 0;

      for (const session of sessions) {
        const success = await SessionManager.revokeSession(
          session.sessionId, 
          '–û—Ç–æ–∑–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤—ã—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)'
        );
        if (success) revokedCount++;
      }

      console.log(`üö™ –û—Ç–æ–∑–≤–∞–Ω–æ ${revokedCount} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return NextResponse.json({
        success: true,
        message: `–û—Ç–æ–∑–≤–∞–Ω–æ ${revokedCount} —Å–µ—Å—Å–∏–π`,
        revokedCount
      });

    } else if (sessionId) {
      // –û—Ç–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
      const success = await SessionManager.revokeSession(
        sessionId, 
        '–û—Ç–æ–∑–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      );

      if (success) {
        console.log(`üö™ –°–µ—Å—Å–∏—è ${sessionId} –æ—Ç–æ–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
        
        return NextResponse.json({
          success: true,
          message: '–°–µ—Å—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞'
        });
      } else {
        return NextResponse.json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏' 
        }, { status: 500 });
      }

    } else {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏' 
      }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏' 
    }, { status: 500 });
  }
}

// POST /api/auth/sessions/cleanup - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ (admin)
export async function POST(req: NextRequest) {
  try {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    
    const cleanedCount = await SessionManager.cleanupExpiredSessions();
    
    return NextResponse.json({
      success: true,
      message: `–û—á–∏—â–µ–Ω–æ ${cleanedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`,
      cleanedCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π' 
    }, { status: 500 });
  }
}
