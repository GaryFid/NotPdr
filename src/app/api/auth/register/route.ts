import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../../lib/supabase';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { z } from 'zod';

const JWT_SECRET = process.env.JWT_SECRET;

const RegisterSchema = z.object({
  username: z.string().min(3).max(64),
  email: z.string().email().optional(),
  password: z.string().min(6).max(128),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
});

export async function POST(req: NextRequest) {
  console.log('üöÄ SUPABASE Registration API –≤—ã–∑–≤–∞–Ω');
  
  if (!JWT_SECRET) {
    console.error('‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: JWT_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
    }, { status: 500 });
  }

  let body: any;
  try {
    body = await req.json();
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify({ ...body, password: '[–°–ö–†–´–¢–û]' }, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' 
    }, { status: 400 });
  }

  const parsed = RegisterSchema.safeParse(body);
  if (!parsed.success) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', parsed.error);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      errors: parsed.error.errors
    }, { status: 400 });
  }

  const { username, email, password, firstName, lastName } = parsed.data;

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUsers, error: checkError } = await supabase
      .from('users')
      .select('id, username, email')
      .or(`username.eq.${username}${email ? `,email.eq.${email}` : ''}`)
      .limit(1);

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', checkError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: checkError.message 
      }, { status: 500 });
    }

    if (existingUsers && existingUsers.length > 0) {
      const existing = existingUsers[0];
      if (existing.username === username) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', username);
        return NextResponse.json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
        }, { status: 409 });
      }
      if (existing.email === email && email) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
        return NextResponse.json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
        }, { status: 409 });
      }
    }

    console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è');
    const passwordHash = await bcrypt.hash(password, 12);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ referralCode
    let referralCode = null;
    let attempts = 0;
    while (attempts < 5) {
      referralCode = Math.random().toString(36).substring(2, 8).toUpperCase();
      const { data: existingCode } = await supabase
        .from('users')
        .select('id')
        .eq('referralCode', referralCode)
        .limit(1);
      
      if (!existingCode || existingCode.length === 0) break;
      attempts++;
    }

    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase');

    const newUserData = {
      username,
      email: email || null,
      passwordHash,
      firstName: firstName || username,
      lastName: lastName || '',
      avatar: null,
      authType: 'local',
      coins: 1000,
      rating: 1000,
      gamesPlayed: 0,
      gamesWon: 0,
      referralCode: referralCode || 'REG' + Date.now().toString().slice(-4)
    };

    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert([newUserData])
      .select('id, username, email, firstName, lastName, avatar, coins, rating, gamesPlayed, gamesWon, referralCode')
      .single();

    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
      return NextResponse.json({ 
        success: false, 
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        details: createError.message 
      }, { status: 500 });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.username);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await supabase
        .from('user_status')
        .insert({
          user_id: newUser.id,
          status: 'online',
          last_seen: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
    } catch (statusError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', statusError);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: newUser.id, 
        username: newUser.username,
        type: 'local'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', newUser.username);

    return NextResponse.json({
      success: true,
      token,
      user: {
        id: newUser.id,
        username: newUser.username,
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        avatar: newUser.avatar,
        coins: newUser.coins,
        rating: newUser.rating,
        gamesPlayed: newUser.gamesPlayed,
        gamesWon: newUser.gamesWon,
        referralCode: newUser.referralCode
      },
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    status: 'SUPABASE Registration API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    supabase: !!process.env.SUPABASE_URL,
    jwt: !!process.env.JWT_SECRET
  });
}