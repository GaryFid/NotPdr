import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { z } from 'zod';

// –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Supabase)
const users = new Map();
let userIdCounter = 1;

const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key-for-demo-12345678901234567890';

const LocalAuthSchema = z.object({
  type: z.literal('local'),
  username: z.string().min(1).max(64),
  password: z.string().min(6).max(128),
});

const TelegramAuthSchema = z.object({
  type: z.literal('telegram'),
  id: z.union([z.string(), z.number()]),
  username: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  photo_url: z.string().optional(),
  initData: z.string().optional(),
});

export async function POST(req: NextRequest) {
  console.log('üöÄ –†–ê–ë–û–ß–ò–ô Auth API –≤—ã–∑–≤–∞–Ω');
  
  let body: any;
  try {
    body = await req.json();
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(body, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' 
    }, { status: 400 });
  }

  if (!body || typeof body.type !== 'string') {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    return NextResponse.json({ 
      success: false, 
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞' 
    }, { status: 400 });
  }

  // 1. –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  if (body.type === 'local') {
    console.log('üë§ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    const parsed = LocalAuthSchema.safeParse(body);
    if (!parsed.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', parsed.error);
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞' 
      }, { status: 400 });
    }

    const { username, password } = parsed.data;
    const userKey = `local_${username}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = users.get(userKey);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: `user_${userIdCounter++}`,
        username,
        firstName: username,
        lastName: '',
        avatar: null,
        authType: 'local',
        coins: 1000,
        rating: 1000,
        gamesPlayed: 0,
        gamesWon: 0,
        referralCode: 'LOCAL' + Date.now().toString().slice(-4),
        createdAt: new Date().toISOString()
      };
      users.set(userKey, user);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id, 
        username: user.username,
        type: 'local'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    return NextResponse.json({
      success: true,
      token,
      user: {
        id: user.id,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        avatar: user.avatar,
        coins: user.coins,
        rating: user.rating,
        gamesPlayed: user.gamesPlayed,
        gamesWon: user.gamesWon,
        referralCode: user.referralCode
      },
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!'
    });
  }

  // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
  if (body.type === 'telegram') {
    console.log('üì± Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    const parsed = TelegramAuthSchema.safeParse(body);
    if (!parsed.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', parsed.error);
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ' 
      }, { status: 400 });
    }

    const { id, username, first_name, last_name, photo_url } = parsed.data;
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', { id, username, first_name, last_name });

    const idStr = id.toString();
    const userKey = `telegram_${idStr}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = users.get(userKey);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        id: `user_${userIdCounter++}`,
        telegramId: idStr,
        username: username || first_name || `user${idStr}`,
        firstName: first_name || '',
        lastName: last_name || '',
        avatar: photo_url,
        authType: 'telegram',
        coins: 1000,
        rating: 1000,
        gamesPlayed: 0,
        gamesWon: 0,
        referralCode: 'TG' + Date.now().toString().slice(-4),
        createdAt: new Date().toISOString()
      };
      users.set(userKey, user);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.firstName = first_name || user.firstName;
      user.lastName = last_name || user.lastName;
      user.avatar = photo_url || user.avatar;
      users.set(userKey, user);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id, 
        telegramId: user.telegramId,
        username: user.username,
        type: 'telegram'
      },
      JWT_SECRET,
      { expiresIn: '30d' }
    );

    return NextResponse.json({
      success: true,
      token,
      user: {
        id: user.id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        avatar: user.avatar,
        coins: user.coins,
        rating: user.rating,
        gamesPlayed: user.gamesPlayed,
        gamesWon: user.gamesWon,
        referralCode: user.referralCode
      },
      message: '–£—Å–ø–µ—à–Ω—ã–π Telegram –≤—Ö–æ–¥!'
    });
  }

  return NextResponse.json({ 
    success: false, 
    message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
  }, { status: 400 });
}

export async function GET() {
  return NextResponse.json({
    status: '–†–ê–ë–û–ß–ò–ô Auth API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    usersCount: users.size,
    message: '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ'
  });
}