import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';
import jwt from 'jsonwebtoken';
import { ratelimit, getRateLimitId } from '../../../lib/ratelimit';

const JWT_SECRET = process.env.JWT_SECRET;

function getUserIdFromRequest(req: NextRequest): string | null {
  if (!JWT_SECRET) return null;
  const auth = req.headers.get('authorization');
  if (!auth) return null;
  const token = auth.replace('Bearer ', '');
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    return payload.userId;
  } catch {
    return null;
  }
}

// GET /api/friends - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
export async function GET(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  const { searchParams } = new URL(req.url);
  const type = searchParams.get('type') || 'all'; // all, online, requests, suggested

  try {
    if (type === 'online') {
      // –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –¥—Ä—É–∑–µ–π
      const { data: onlineFriends, error } = await supabase
        .from('friends')
        .select(`
          friend_id,
          users!friends_friend_id_fkey (
            id, username, firstName, lastName, avatar,
            user_status (status, current_room_id, last_seen)
          )
        `)
        .eq('user_id', userId)
        .eq('status', 'accepted');

      if (error) throw error;

      const online = onlineFriends
        ?.filter(f => f.users?.user_status?.status === 'online' || f.users?.user_status?.status === 'in_game')
        .map(f => ({
          id: f.friend_id,
          name: f.users?.username || f.users?.firstName || '–ò–≥—Ä–æ–∫',
          status: f.users?.user_status?.status === 'in_game' ? '–í –∏–≥—Ä–µ' : '–í —Å–µ—Ç–∏',
          avatar: f.users?.avatar || 'üéÆ',
          currentRoom: f.users?.user_status?.current_room_id
        })) || [];

      return NextResponse.json({ success: true, friends: online });
    }

    if (type === 'requests') {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
      const { data: requests, error } = await supabase
        .from('friends')
        .select(`
          id, user_id, created_at,
          users!friends_user_id_fkey (username, firstName, lastName, avatar)
        `)
        .eq('friend_id', userId)
        .eq('status', 'pending');

      if (error) throw error;

      const friendRequests = requests?.map(r => ({
        id: r.id,
        userId: r.user_id,
        name: r.users?.username || r.users?.firstName || '–ò–≥—Ä–æ–∫',
        message: '–•–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è',
        avatar: r.users?.avatar || 'üé≠',
        date: r.created_at
      })) || [];

      return NextResponse.json({ success: true, requests: friendRequests });
    }

    if (type === 'suggested') {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
      const { data: suggested, error } = await supabase
        .from('users')
        .select('id, username, firstName, lastName, avatar')
        .neq('id', userId)
        .limit(5);

      if (error) throw error;

      // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
      const { data: existingFriends } = await supabase
        .from('friends')
        .select('friend_id')
        .eq('user_id', userId);

      const friendIds = existingFriends?.map(f => f.friend_id) || [];
      const suggestions = suggested
        ?.filter(u => !friendIds.includes(u.id))
        .map(u => ({
          id: u.id,
          name: u.username || u.firstName || '–ò–≥—Ä–æ–∫',
          avatar: u.avatar || 'üéØ',
          mutualFriends: Math.floor(Math.random() * 5) // TODO: –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π
        })) || [];

      return NextResponse.json({ success: true, suggested: suggestions });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π (type === 'all')
    const { data: allFriends, error } = await supabase
      .from('friends')
      .select(`
        friend_id,
        users!friends_friend_id_fkey (
          id, username, firstName, lastName, avatar,
          user_status (status, last_seen)
        )
      `)
      .eq('user_id', userId)
      .eq('status', 'accepted');

    if (error) throw error;

    const friends = allFriends?.map(f => ({
      id: f.friend_id,
      name: f.users?.username || f.users?.firstName || '–ò–≥—Ä–æ–∫',
      status: getStatusText(f.users?.user_status?.status, f.users?.user_status?.last_seen),
      avatar: f.users?.avatar || 'üéÆ',
      lastSeen: f.users?.user_status?.last_seen,
      isOnline: f.users?.user_status?.status === 'online' || f.users?.user_status?.status === 'in_game'
    })) || [];

    return NextResponse.json({ success: true, friends });

  } catch (error) {
    console.error('Friends API error:', error);
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  }
}

// POST /api/friends - –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å
export async function POST(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  // Rate limiting
  const id = getRateLimitId(req);
  const { success } = await ratelimit.limit(`friends:${id}`);
  if (!success) {
    return NextResponse.json({ success: false, message: 'Too many requests' }, { status: 429 });
  }

  try {
    const { action, friendId, username } = await req.json();

    if (action === 'add') {
      let targetUserId = friendId;

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username –≤–º–µ—Å—Ç–æ ID
      if (username && !friendId) {
        const { data: user, error } = await supabase
          .from('users')
          .select('id')
          .eq('username', username)
          .single();

        if (error || !user) {
          return NextResponse.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
        }
        targetUserId = user.id;
      }

      if (!targetUserId || targetUserId === userId) {
        return NextResponse.json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 400 });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å–∞
      const { data: existing } = await supabase
        .from('friends')
        .select('id, status')
        .or(`and(user_id.eq.${userId},friend_id.eq.${targetUserId}),and(user_id.eq.${targetUserId},friend_id.eq.${userId})`)
        .single();

      if (existing) {
        if (existing.status === 'accepted') {
          return NextResponse.json({ success: false, message: '–£–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö' }, { status: 400 });
        }
        if (existing.status === 'pending') {
          return NextResponse.json({ success: false, message: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' }, { status: 400 });
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è
      const { error } = await supabase
        .from('friends')
        .insert({
          user_id: userId,
          friend_id: targetUserId,
          status: 'pending'
        });

      if (error) throw error;

      return NextResponse.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    }

    if (action === 'accept') {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è
      const { error } = await supabase
        .from('friends')
        .update({ status: 'accepted' })
        .eq('user_id', friendId)
        .eq('friend_id', userId)
        .eq('status', 'pending');

      if (error) throw error;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (–≤–∑–∞–∏–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
      await supabase
        .from('friends')
        .insert({
          user_id: userId,
          friend_id: friendId,
          status: 'accepted'
        });

      return NextResponse.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç' });
    }

    if (action === 'decline') {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è
      const { error } = await supabase
        .from('friends')
        .delete()
        .eq('user_id', friendId)
        .eq('friend_id', userId)
        .eq('status', 'pending');

      if (error) throw error;

      return NextResponse.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω' });
    }

    return NextResponse.json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }, { status: 400 });

  } catch (error) {
    console.error('Friends POST error:', error);
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  }
}

// DELETE /api/friends - –£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π
export async function DELETE(req: NextRequest) {
  const userId = getUserIdFromRequest(req);
  if (!userId) {
    return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { searchParams } = new URL(req.url);
    const friendId = searchParams.get('friendId');

    if (!friendId) {
      return NextResponse.json({ success: false, message: 'Friend ID required' }, { status: 400 });
    }

    // –£–¥–∞–ª—è–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±—ã
    await supabase
      .from('friends')
      .delete()
      .or(`and(user_id.eq.${userId},friend_id.eq.${friendId}),and(user_id.eq.${friendId},friend_id.eq.${userId})`);

    return NextResponse.json({ success: true, message: '–£–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π' });

  } catch (error) {
    console.error('Friends DELETE error:', error);
    return NextResponse.json({ success: false, message: 'Internal server error' }, { status: 500 });
  }
}

function getStatusText(status: string | null, lastSeen: string | null): string {
  if (!status || status === 'offline') {
    if (lastSeen) {
      const diff = Date.now() - new Date(lastSeen).getTime();
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const days = Math.floor(hours / 24);
      
      if (days > 0) {
        return `–ë—ã–ª(–∞) ${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
      }
      if (hours > 0) {
        return `–ë—ã–ª(–∞) ${hours} —á. –Ω–∞–∑–∞–¥`;
      }
      return '–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ';
    }
    return '–ù–µ –≤ —Å–µ—Ç–∏';
  }
  
  switch (status) {
    case 'online': return '–í —Å–µ—Ç–∏';
    case 'in_game': return '–í –∏–≥—Ä–µ';
    case 'away': return '–û—Ç–æ—à–µ–ª';
    default: return '–ù–µ –≤ —Å–µ—Ç–∏';
  }
}
