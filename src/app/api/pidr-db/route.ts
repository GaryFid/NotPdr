import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '../../../lib/supabase';

export async function GET(req: NextRequest) {
  console.log('üîç P.I.D.R. Database API - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      return NextResponse.json({
        success: false,
        message: 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        tables: {},
        hasSupabase: false
      });
    }

    console.log('‚úÖ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...');

    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü P.I.D.R.
    const pidrTables = [
      '_pidr_users',
      '_pidr_rooms', 
      '_pidr_room_players',
      '_pidr_games',
      '_pidr_game_results',
      '_pidr_coin_transactions',
      '_pidr_friends',
      '_pidr_achievements',
      '_pidr_user_achievements',
      '_pidr_user_settings'
    ];

    const tableStatus: Record<string, any> = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const tableName of pidrTables) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const { data, error, count } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });

        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error.message}`);
          tableStatus[tableName] = {
            exists: false,
            error: error.message,
            count: 0
          };
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
          tableStatus[tableName] = {
            exists: true,
            count: count || 0,
            error: null
          };
        }
      } catch (err: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${tableName}:`, err.message);
        tableStatus[tableName] = {
          exists: false,
          error: err.message,
          count: 0
        };
      }
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalTables = pidrTables.length;
    const existingTables = Object.values(tableStatus).filter((t: any) => t.exists).length;
    const missingTables = totalTables - existingTables;

    return NextResponse.json({
      success: true,
      message: `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalTables} —Ç–∞–±–ª–∏—Ü P.I.D.R.`,
      hasSupabase: true,
      tables: tableStatus,
      summary: {
        total: totalTables,
        existing: existingTables,
        missing: missingTables,
        ready: missingTables === 0
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ P.I.D.R. Database API:', error);
    return NextResponse.json({
      success: false,
      message: error.message,
      hasSupabase: false,
      tables: {}
    }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  console.log('üèóÔ∏è P.I.D.R. Database API - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü');
  
  try {
    const { action } = await req.json();
    
    if (action === 'create-tables') {
      // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
      const fs = require('fs');
      const path = require('path');
      const schemaPath = path.join(process.cwd(), 'src/lib/database/pidr-schema.sql');
      
      if (!fs.existsSync(schemaPath)) {
        return NextResponse.json({
          success: false,
          message: '–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, { status: 404 });
      }

      const schemaSql = fs.readFileSync(schemaPath, 'utf8');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands = schemaSql
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

      console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º ${commands.length} SQL –∫–æ–º–∞–Ω–¥...`);

      const results = [];
      let successCount = 0;
      let errorCount = 0;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        
        try {
          const { error } = await supabase.rpc('exec_sql', { sql_query: command });
          
          if (error) {
            console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${error.message}`);
            results.push({
              command: i + 1,
              success: false,
              error: error.message,
              sql: command.substring(0, 100) + '...'
            });
            errorCount++;
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
            results.push({
              command: i + 1,
              success: true,
              error: null
            });
            successCount++;
          }
        } catch (err: any) {
          console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: ${err.message}`);
          results.push({
            command: i + 1,
            success: false,
            error: err.message,
            sql: command.substring(0, 100) + '...'
          });
          errorCount++;
        }
      }

      return NextResponse.json({
        success: errorCount === 0,
        message: `–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${successCount}/${commands.length} –∫–æ–º–∞–Ω–¥`,
        results,
        summary: {
          total: commands.length,
          success: successCount,
          errors: errorCount
        }
      });
    }

    if (action === 'test-insert') {
      // –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testUser = {
        telegram_id: '12345678',
        username: 'test_user',
        first_name: 'Test',
        last_name: 'User',
        coins: 1000,
        rating: 0
      };

      const { data, error } = await supabase
        .from('_pidr_users')
        .insert(testUser)
        .select()
        .single();

      if (error) {
        return NextResponse.json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏',
          error: error.message
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω',
        data
      });
    }

    if (action === 'test-room') {
      // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      const testRoom = {
        room_code: 'TEST' + Math.random().toString(36).substring(2, 8).toUpperCase(),
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
        max_players: 4,
        current_players: 1,
        status: 'waiting'
      };

      const { data, error } = await supabase
        .from('_pidr_rooms')
        .insert(testRoom)
        .select()
        .single();

      if (error) {
        return NextResponse.json({
          success: false,
          message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã',
          error: error.message
        }, { status: 500 });
      }

      return NextResponse.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
        data
      });
    }

    return NextResponse.json({
      success: false,
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    }, { status: 400 });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ P.I.D.R. Database POST:', error);
    return NextResponse.json({
      success: false,
      message: error.message
    }, { status: 500 });
  }
}
