'use client'
import { useState, useMemo, useEffect } from 'react';
import Image from 'next/image';
import BottomNav from '../../components/BottomNav';
import styles from './GameTable.module.css';
import { useDragAndDrop } from '@/hooks/useDragAndDrop';
import type { Player, Card } from '../../types/game';
import type { Card as StoreCard } from '../../store/gameStore';
import { motion, AnimatePresence } from 'framer-motion';
import React from 'react';
import { useGameStore } from '@/store/gameStore';
import { AIPlayer, AIDifficulty } from '@/lib/game/ai-player';

const CARD_IMAGES = [
  '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
  '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
  '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
  '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
  '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
  '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
  '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
  '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
  '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
  'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png',
  'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
  'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
  'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
];
const CARD_BACK = 'back.png';

// –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ–∫—Ä—É–≥ –æ–≤–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
const getCirclePosition = (index: number, total: number): { top: string; left: string } => {
  // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–≤–∞–ª—å–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –∏–≥—Ä–æ–∫ 0 –≤–Ω–∏–∑—É
  const baseAngle = 270; // —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –±—ã–ª —Å–Ω–∏–∑—É
  const step = 360 / Math.max(total, 1);
  const microBuffer = total >= 9 ? 2.5 : total === 8 ? 2 : total === 7 ? 1.5 : 0; // –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É —Å–æ—Å–µ–¥—è–º–∏
  const angle = baseAngle + index * (step - microBuffer);
  const radians = (angle * Math.PI) / 180;

  // –†–∞–¥–∏—É—Å—ã —Å—Ç–æ–ª–∞ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–≤–∞–ª)
  const n = Math.max(total, 1);
  const scale = Math.min(1.5, 1 + Math.max(0, n - 4) * 0.09);
  const rTableX = 34 * scale;
  const rTableY = 28 * scale;

  // –û—Ä–±–∏—Ç–∞ —Å–∏–¥–µ–Ω–∏–π ‚Äî –≤—Å–µ–≥–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å—Ç–æ–ª–∞ (–£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è –æ—Ç–¥–∞–ª–µ–Ω–∏—è –æ—Ç –∫–æ–ª–æ–¥—ã)
  const seatMargin = 16 + Math.max(0, n - 5) * 3; // –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –±–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø (–±—ã–ª–æ 8 + n*2)
  const rSeatX = rTableX + seatMargin;
  const rSeatY = rTableY + seatMargin;

  const x = 50 + rSeatX * Math.cos(radians);
  const y = 50 + rSeatY * Math.sin(radians);

  return {
    left: `${x}%`,
    top: `${y}%`,
  };
};

function getFirstPlayerIdx(players: Player[]): number {
  for (let i = 0; i < players.length; i++) {
    if (players[i].isUser) return i;
  }
  return 0;
}

interface GamePageContentProps {
  initialPlayerCount?: number;
}

export default function GamePageContent({ initialPlayerCount = 4 }: GamePageContentProps) {
  const { 
    isGameActive, gameStage, turnPhase, stage2TurnPhase,
    players, currentPlayerId, deck, availableTargets,
    selectedHandCard, revealedDeckCard, tableStack, trumpSuit,
    startGame, endGame, 
    drawCard, makeMove, onDeckClick, placeCardOnSelfByRules,
    selectHandCard, playSelectedCard, takeTableCards
  } = useGameStore();

  const [playerCount, setPlayerCount] = useState(initialPlayerCount);
  const [dealt, setDealt] = useState(false);
  const [gameInitialized, setGameInitialized] = useState(false);
  const [previousGameStage, setPreviousGameStage] = useState(gameStage);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Å—à—Ç–∞–±—ã –¥–ª—è 5‚Äì9 –∏–≥—Ä–æ–∫–æ–≤: –º–µ–Ω—å—à–µ —Å—Ç–æ–ª, —á—É—Ç—å –º–µ–Ω—å—à–µ —Å–∏–¥–µ–Ω—å—è, –±–æ–ª—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  const tableScale = useMemo(() => {
    const n = players.length || playerCount;
    if (n >= 9) return 0.78;
    if (n === 8) return 0.82;
    if (n === 7) return 0.86;
    if (n === 6) return 0.9;
    return 0.95; // 5 –∏ –º–µ–Ω—å—à–µ
  }, [players.length, playerCount]);

  const seatScale = useMemo(() => {
    const n = players.length || playerCount;
    if (n >= 9) return 0.82;
    if (n === 8) return 0.86;
    if (n === 7) return 0.9;
    if (n === 6) return 0.94;
    return 1; // 5 –∏ –º–µ–Ω—å—à–µ
  }, [players.length, playerCount]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const currentPlayer = players.find(p => p.id === currentPlayerId);
  const currentPlayerIndex = players.findIndex(p => p.id === currentPlayerId);
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ò–ò –¥–ª—è –±–æ—Ç–æ–≤
  const [aiPlayers, setAiPlayers] = useState<Map<number, AIPlayer>>(new Map());
  
  // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [isMobile, setIsMobile] = useState(false);
  const [isSmallMobile, setIsSmallMobile] = useState(false);
  
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth <= 768);
      setIsSmallMobile(window.innerWidth <= 480);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    const newAiPlayers = new Map<number, AIPlayer>();
    players.forEach(player => {
      if (player.isBot) {
        const playerId = typeof player.id === 'string' ? parseInt(player.id) : player.id;
        newAiPlayers.set(playerId, new AIPlayer(playerId, player.difficulty || 'medium'));
      }
    });
    setAiPlayers(newAiPlayers);
  }, [players]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ–Ω—å–∫–æ–≤
  useEffect(() => {
    if (gameStage !== previousGameStage) {
      setPreviousGameStage(gameStage);
    }
  }, [gameStage, previousGameStage]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤ –ò–ò
  useEffect(() => {
    if (!isGameActive || !currentPlayerId) return;
    
    const currentPlayer = players.find(p => p.id === currentPlayerId);
    if (!currentPlayer || !currentPlayer.isBot) return;
    
    const playerIdNum = typeof currentPlayerId === 'string' ? parseInt(currentPlayerId) : currentPlayerId;
    const ai = aiPlayers.get(playerIdNum);
    if (!ai) return;
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ò–ò –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const makeAIMove = async () => {
      const gameState = {
        players,
        currentPlayer: currentPlayerId,
        gameStage,
        deck,
        availableTargets,
        revealedDeckCard,
        tableStack,
        trumpSuit // –ö–æ–∑—ã—Ä—å –∏–∑ gameStore (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      };
      
      const decision = await ai.makeDecisionWithDelay(gameState);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ò–ò —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã
      if (gameStage === 1) {
        // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É: –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ ‚Üí –∫–æ–ª–æ–¥–∞ ‚Üí –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        switch (decision.action) {
          case 'place_on_target':
            if (decision.targetPlayerId !== undefined && makeMove) {
              makeMove(decision.targetPlayerId.toString());
            }
            break;
          case 'draw_card':
            // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ò–ò –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –∏–∑ —Ä—É–∫–∏
            if (onDeckClick) onDeckClick();
            break;
          default:
            console.log('–ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ 1-–π —Å—Ç–∞–¥–∏–∏');
            break;
        }
      } else if (gameStage === 2) {
        // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É selectHandCard + playSelectedCard
        switch (decision.action) {
          case 'play_card':
            if (decision.cardToPlay && selectHandCard) {
              // –ù–∞–π–¥–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞ –∏ –≤—ã–±–µ—Ä–µ–º –µ—ë
              const currentPlayer = players.find(p => p.id === currentPlayerId);
              if (currentPlayer) {
                const cardInHand = currentPlayer.cards.find(c => 
                  c.image === decision.cardToPlay?.image && c.open
                );
                if (cardInHand) {
                  console.log(`ü§ñ [AI Stage2] –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É: ${cardInHand.image}`);
                  selectHandCard(cardInHand);
                  // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É
                  setTimeout(() => {
                    console.log(`ü§ñ [AI Stage2] –ò–≥—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É`);
                    playSelectedCard();
                  }, 1000);
                }
              }
            }
            break;
          case 'draw_card':
            // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç "–≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞"
            if (takeTableCards) {
              console.log(`ü§ñ [AI Stage2] –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞`);
              takeTableCards();
            }
            break;
        }
      } else {
        // –í 3-–π —Å—Ç–∞–¥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        switch (decision.action) {
          case 'draw_card':
            if (drawCard) drawCard();
            break;
          case 'place_on_target':
            if (decision.targetPlayerId !== undefined && makeMove) {
              makeMove(decision.targetPlayerId.toString());
            }
            break;
          case 'place_on_self':
            if (playSelectedCard) playSelectedCard();
            break;
        }
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –ò–ò —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const timeoutId = setTimeout(makeAIMove, 1000);
    
    return () => clearTimeout(timeoutId);
  }, [currentPlayerId, isGameActive, players, gameStage, aiPlayers]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏–∑ gameStore
  useEffect(() => {
    if (!gameInitialized) {
      if (isGameActive && players.length > 0) {
        // –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ gameStore - –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console.log(`üéÆ –ò–≥—Ä–∞ P.I.D.R. –∑–∞–ø—É—â–µ–Ω–∞: ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
        setPlayerCount(players.length);
        setGameInitialized(true);
        setDealt(false);
      } else {
        // –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console.log('üéÆ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã...');
        setGameInitialized(true);
      }
    }
  }, [gameInitialized, isGameActive, players.length]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (isGameActive && !dealt) {
      setDealt(true);
    }
  }, [isGameActive, dealt]);

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const handleStartGame = () => {
    startGame('multiplayer', playerCount);
    setDealt(false);
    setGameInitialized(true);
  };



  const canDrawCard = turnPhase === 'deck_card_revealed' && currentPlayer?.id === currentPlayerId;
  const canClickDeck = turnPhase === 'showing_deck_hint' && currentPlayer?.id === currentPlayerId;
  const waitingForTarget = turnPhase === 'waiting_target_selection';
  
  // –£–î–ê–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ canBeatTopCard –∏ shouldShowTakeButton - –∫–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
  if (!isGameActive) {
    return (
      <div className={styles.gameContainer}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '100vh',
          color: '#e2e8f0',
          textAlign: 'center',
          padding: '20px'
        }}>
          <h2 style={{ marginBottom: '20px', fontSize: '24px' }}>P.I.D.R. Game</h2>
          <p style={{ marginBottom: '30px', opacity: 0.7 }}>
            –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–≥—Ä—É.
          </p>
          <button
            onClick={() => window.history.back()}
            style={{
              background: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',
              color: '#fff',
              border: 'none',
              borderRadius: '12px',
              padding: '12px 24px',
              fontSize: '16px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
          >
            ‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.gameContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã - —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã */}
      {isGameActive && (
        <div className={styles.gameHeader}>
          <div className={styles.stageInfo}>
            {gameStage >= 2 && trumpSuit && (
              <span className={styles.trumpIcon}>
                {trumpSuit === 'hearts' ? '‚ô•Ô∏è' : 
                 trumpSuit === 'diamonds' ? '‚ô¶Ô∏è' : 
                 trumpSuit === 'clubs' ? '‚ô£Ô∏è' : 
                 trumpSuit === 'spades' ? '‚ô†Ô∏è' : ''}
              </span>
            )}
            –°—Ç–∞–¥–∏—è {gameStage}
          </div>
          <div className={styles.deckInfo}>
            –ö–æ–ª–æ–¥–∞: {deck.length}
          </div>
        </div>
      )}

      {!isGameActive ? (
        <div className={styles.setupScreen}>
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã P.I.D.R.</h2>
          <div className={styles.playerCountSelector}>
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {playerCount}</label>
            <input
              type="range"
              min="3"
              max="9"
              value={playerCount}
              onChange={(e) => setPlayerCount(Number(e.target.value))}
              className={styles.rangeSlider}
            />
          </div>
          <button onClick={handleStartGame} className={styles.startButton}>
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </button>
        </div>
      ) : (
        <div className={styles.gameArea}>
          <div className={styles.tableBg}>
            <div className={styles.tableCenter} style={{ transform: `translate(-50%, -50%) scale(${tableScale})` }}>
              
              {/* –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞ –æ—Ç –∫–æ–ª–æ–¥—ã) */}
              {revealedDeckCard && (
                <div className={styles.revealedCardContainer}>
                  <div className={styles.revealedCard}>
                    <div 
                      className={styles.cardBackdrop} 
                      style={{ 
                        width: isSmallMobile ? 65 : isMobile ? 72 : 80, 
                        height: isSmallMobile ? 97 : isMobile ? 108 : 120,
                        background: 'white',
                        borderRadius: '8px',
                        position: 'absolute',
                        zIndex: -1
                      }} 
                    />
                    <Image 
                      src={revealedDeckCard.image ? `/img/cards/${revealedDeckCard.image}` : '/img/cards/back.png'} 
                      alt="revealed card" 
                      width={isSmallMobile ? 65 : isMobile ? 72 : 80} 
                      height={isSmallMobile ? 97 : isMobile ? 108 : 120}
                      className={styles.revealedCardImage}
                    />
                  </div>
                </div>
              )}

              {/* –ö–æ–ª–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–æ—Ä–∞ */}
              <div className={styles.dropZone}>
                <div 
                  className={styles.deckStack}
                  onClick={() => {
                    if (canClickDeck) {
                      onDeckClick();
                    } else if (canDrawCard) {
                      drawCard();
                    }
                  }}
                  style={{
                    cursor: (canDrawCard || canClickDeck) ? 'pointer' : 'default',
                    opacity: (canDrawCard || canClickDeck) ? 1 : 0.7
                  }}
                >
                  {deck.length > 0 && (
                    <Image 
                      src="/img/cards/back.png" 
                      alt="deck" 
                      width={isSmallMobile ? 56 : isMobile ? 63 : 70} 
                      height={isSmallMobile ? 80 : isMobile ? 90 : 100}
                      className={styles.deckCard}
                    />
                  )}
                  <div className={styles.deckCount}>{deck.length}</div>
                </div>
                
                {/* –í 1-–π —Å—Ç–∞–¥–∏–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" - —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ */}
                {canDrawCard && gameStage > 1 && (
                  <button 
                    onClick={() => drawCard()}
                    className={styles.drawButton}
                  >
                    –í–∑—è—Ç—å –∫–∞—Ä—Ç—É
                  </button>
                )}
              </div>

              {/* –°—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ (Stage 2) */}
              {Array.isArray(tableStack) && tableStack.length > 0 && (
                <div className={styles.tableStack}>
                  <div className={styles.tableLabel}>–°—Ç–æ–ª: {tableStack.length}</div>
                  {tableStack.map((c, idx) => {
                    const isTop = idx === tableStack.length - 1;
                    const size = c.open ? { w: 110, h: 156 } : { w: 90, h: 128 };
                    return (
                      <div
                        key={c.id ?? idx}
                        className={`${styles.tableCard} ${isTop ? styles.tableCardTop : ''}`}
                        style={{
                          transform: `translate(${idx * 8}px, ${-idx * 2}px) rotate(${(idx % 5) - 2}deg)`
                        }}
                        title={c.open && c.image ? c.image : '–ö–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ'}
                      >
                        <Image
                          src={c.open && c.image ? `/img/cards/${c.image}` : '/img/cards/back.png'}
                          alt={c.open ? 'table card' : 'back'}
                          width={size.w}
                          height={size.h}
                          className={styles.tableCardImage}
                          draggable={false}
                        />
                      </div>
                    );
                  })}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ "–≤–∑—è—Ç—å –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞ */}
                </div>
              )}

              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ö–õ–ò–ö–ù–ò!" –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏ */}
              {gameStage === 1 && canClickDeck && (
                <div className={styles.centralButtonContainer}>
                  <button 
                    className={styles.centralButton}
                    onClick={() => onDeckClick()}
                  >
                    –ö–õ–ò–ö–ù–ò!
                  </button>
                  <div className={styles.deckCount}>{deck.length}</div>
                </div>
              )}



              {/* –ò–≥—Ä–æ–∫–∏ –ø–æ –∫—Ä—É–≥—É */}
              {players.map((p, playerIndex) => {
                const position = getCirclePosition(playerIndex, players.length);
                const isCurrentPlayer = p.id === currentPlayer?.id;
                const isCurrentTurn = p.id === players[currentPlayerIndex]?.id;
                const isTargetAvailable = availableTargets.includes(playerIndex);
                const isCurrentPlayerCard = p.id === currentPlayerId && turnPhase === 'analyzing_hand' && availableTargets.length > 0;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∞–∑—ã waiting_deck_action –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
                const canPlaceOnSelfInDeckAction = p.id === currentPlayerId && 
                                                   turnPhase === 'waiting_deck_action' && 
                                                   useGameStore.getState().canPlaceOnSelfByRules;
                
                const isClickableTarget = isTargetAvailable && (turnPhase === 'waiting_target_selection' || turnPhase === 'waiting_deck_action');
                const isClickableOwnCard = isCurrentPlayerCard || canPlaceOnSelfInDeckAction;
                
                // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç
                if (p.id === currentPlayerId) {
                  console.log(`üéØ [GamePageContent] –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ ${p.name}:`);
                  console.log(`üéØ [GamePageContent] - p.id: ${p.id}, currentPlayerId: ${currentPlayerId}, —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${p.id === currentPlayerId}`);
                  console.log(`üéØ [GamePageContent] - turnPhase: ${turnPhase}`);
                  console.log(`üéØ [GamePageContent] - availableTargets: [${availableTargets.join(', ')}], –¥–ª–∏–Ω–∞: ${availableTargets.length}`);
                  console.log(`üéØ [GamePageContent] - isCurrentPlayerCard: ${isCurrentPlayerCard}`);
                  console.log(`üéØ [GamePageContent] - canPlaceOnSelfInDeckAction: ${canPlaceOnSelfInDeckAction}`);
                  console.log(`üéØ [GamePageContent] - isClickableOwnCard: ${isClickableOwnCard}`);
                }
                
                if (isTargetAvailable) {
                  console.log(`üéØ [GamePageContent] –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –¶–ï–õ–ò ${p.name} (–∏–Ω–¥–µ–∫—Å ${playerIndex}):`);
                  console.log(`üéØ [GamePageContent] - isTargetAvailable: ${isTargetAvailable}`);
                  console.log(`üéØ [GamePageContent] - turnPhase: ${turnPhase}`);
                  console.log(`üéØ [GamePageContent] - isClickableTarget: ${isClickableTarget}`);
                }

                return (
                  <div
                    key={p.id}
                    className={`${styles.playerSeat} ${isCurrentPlayer ? styles.currentPlayerSeat : ''} ${isCurrentTurn ? styles.playerTurn : ''} ${isTargetAvailable ? styles.highlightedTarget : ''}`}
                    style={{
                      position: 'absolute',
                      left: position.left,
                      top: position.top,
                      transform: `translate(-50%, -50%) scale(${seatScale})`, // –¶–µ–Ω—Ç—Ä + –º–∞—Å—à—Ç–∞–± –ø–æ–¥ –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                    }}
                  >
                    {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
                    <div className={styles.avatarWrap}>
                      <div className={styles.avatarContainer}>
                        {p.avatar && p.avatar.startsWith('data:') ? (
                          // SVG –∞–≤–∞—Ç–∞—Ä
                          <div 
                            className={styles.avatar}
                            style={{
                              width: isSmallMobile ? 38 : isMobile ? 45 : 55,
                              height: isSmallMobile ? 38 : isMobile ? 45 : 55,
                              borderRadius: '50%',
                              backgroundImage: `url(${p.avatar})`,
                              backgroundSize: 'cover',
                              border: isCurrentPlayer ? '4px solid #ffd700' : '2px solid rgba(255,255,255,0.3)',
                              boxShadow: isCurrentPlayer ? '0 0 20px #ffd700, 0 0 40px rgba(255,215,0,0.3)' : 'none',
                              animation: isCurrentPlayer ? 'pulse 2s infinite' : 'none'
                            }}
                          />
                        ) : (
                          // –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                          <Image 
                            src={p.avatar || '/img/player-avatar.svg'} 
                            alt="avatar" 
                            width={isSmallMobile ? 38 : isMobile ? 45 : 55} 
                            height={isSmallMobile ? 38 : isMobile ? 45 : 55} 
                            className={styles.avatar}
                            style={{
                              borderRadius: '50%',
                              border: isCurrentPlayer ? '4px solid #ffd700' : '2px solid rgba(255,255,255,0.3)',
                              boxShadow: isCurrentPlayer ? '0 0 20px #ffd700, 0 0 40px rgba(255,215,0,0.3)' : 'none',
                              animation: isCurrentPlayer ? 'pulse 2s infinite' : 'none'
                            }}
                          />
                        )}
                        {p.isBot && (
                          <div className={styles.botBadge} title={`AI (${p.difficulty || 'medium'})`}>
                            ü§ñ
                          </div>
                        )}
                      </div>
                      <div style={{ textAlign: 'center' }}>
                        <span 
                          className={styles.playerName} 
                          style={{ 
                            fontSize: isSmallMobile ? '11px' : isMobile ? '12px' : '14px', 
                            fontWeight: 600,
                            color: isCurrentPlayer ? '#ffd700' : 'white',
                            textShadow: isCurrentPlayer ? '0 0 10px #ffd700' : 'none',
                            display: 'block'
                          }}
                        >
                          {p.name}
                          {isCurrentPlayer && <span style={{ marginLeft: 4 }}>üëë</span>}
                        </span>
                        {p.cards.length > 3 && (
                          <span 
                            style={{ 
                              fontSize: '11px', 
                              color: '#94a3b8',
                              display: 'block',
                              marginTop: '2px'
                            }}
                          >
                            +{p.cards.length - 3} –∫–∞—Ä—Ç
                          </span>
                        )}
                      </div>
                      {isTargetAvailable && <span style={{color:'#ffd700',marginLeft:4}}>üéØ</span>}
                    </div>
                    
                    {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ–Ω—å–∫–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç—ã */}
                    <div className={styles.cardsContainer}>
                      {/* –ü–µ–Ω—å–∫–∏ (–ø–æ–¥–ª–æ–∂–∫–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 3-–π —Å—Ç–∞–¥–∏–∏ */}
                      {/* –ü–µ–Ω—å–∫–∏ - —ç—Ç–æ —Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 3-–π —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã */}
                      {/* –û–Ω–∏ –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–Ω–µ —É–≤–µ–ª–∏—á–µ–Ω—ã –≤ 2 —Ä–∞–∑–∞) –∏ –ø–ª–∞–≤–Ω–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è/–∏—Å—á–µ–∑–∞—é—Ç */}
                      <AnimatePresence mode="wait">
                        {p.penki && p.penki.length > 0 && gameStage === 3 && (
                          <motion.div 
                            key="penki-visible"
                            className={styles.penkiRow}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            transition={{ duration: 0.3 }}
                          >
                            {p.penki.map((penkiCard, pi) => {
                              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ–Ω—å–∫–æ–≤ —Ç–æ–∂–µ
                              const playerPosition = getCirclePosition(playerIndex, players.length);
                              const isLeftSide = parseFloat(playerPosition.left) < 50;
                              const penkiOffset = isLeftSide ? pi * 10 : -pi * 10;
                              
                              return (
                              <motion.div
                                key={penkiCard.id}
                                className={`${styles.penkiCard} ${styles.visible}`}
                                style={{ 
                                  left: `${penkiOffset}px`,
                                  zIndex: pi + 1
                                }}
                                title={`–ü–µ–Ω—ë–∫ ${pi + 1} (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ 3-–π —Å—Ç–∞–¥–∏–∏)`}
                                initial={{ opacity: 0, scale: 0.8, y: 10 }}
                                animate={{ opacity: 1, scale: 1, y: 0 }}
                                exit={{ opacity: 0, scale: 0.8, y: 10 }}
                                transition={{ 
                                  duration: 0.4,
                                  delay: pi * 0.1 
                                }}
                              >
                                <Image
                                  src="/img/cards/back.png"
                                  alt="penki"
                                  width={isSmallMobile ? 28 : isMobile ? 32 : 35} /* –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ */
                                  height={isSmallMobile ? 40 : isMobile ? 46 : 52} /* –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ */
                                  style={{ 
                                    borderRadius: '8px',
                                    opacity: 0.8
                                  }}
                                />
                              </motion.div>
                            );
                            })}
                          </motion.div>
                        )}
                      </AnimatePresence>
                      
                      {/* –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–≤–µ—Ä—Ö –ø–µ–Ω—å–∫–æ–≤ */}
                      {p.cards.length > 0 && (
                        <div className={styles.activeCardContainer}>
                          {p.cards.slice(-3).map((card, ci) => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–∞—Ä—Ç—ã
                            const visibleCards = p.cards.slice(-3);
                            const isTopCard = ci === visibleCards.length - 1; // –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç
                            
                            // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏ –¥–ª—è isTopCard
                            if (p.id === currentPlayerId) {
                              console.log(`üéØ [GamePageContent] –ö–∞—Ä—Ç–∞ ${ci} –∏–≥—Ä–æ–∫–∞ ${p.name}: isTopCard = ${isTopCard}, visibleCards.length = ${visibleCards.length}`);
                            }
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∏–Ω–≥–∞ –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
                            const playerPosition = getCirclePosition(playerIndex, players.length);
                            const isLeftSide = parseFloat(playerPosition.left) < 50; // –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
                            const spacing = isSmallMobile ? 12 : isMobile ? 13 : 15;
                            const cardOffset = isLeftSide ? ci * spacing : -ci * spacing;
                            
                            return (
                              <motion.div
                                key={card.id}
                                initial={{ opacity: 0, y: -40, rotateY: -180, scale: 0.5 }}
                                animate={{ 
                                  opacity: dealt ? 1 : 0, 
                                  y: 0, 
                                  rotateY: 0, 
                                  scale: 1,
                                  transition: {
                                    type: "spring",
                                    stiffness: 200,
                                    damping: 15
                                  }
                                }}
                                exit={{ opacity: 0, y: 40, rotateY: 180, scale: 0.5 }}
                                transition={{ 
                                  delay: (playerIndex * 0.15) + (ci * 0.08), 
                                  duration: 0.6,
                                  type: "spring",
                                  stiffness: 150,
                                  damping: 12
                                }}
                                whileHover={{ 
                                  scale: isClickableTarget && isTopCard ? 1.15 : 1.05,
                                  rotateY: 5,
                                  z: 20
                                }}
                                style={{ 
                                  position: 'absolute',
                                  left: `${cardOffset}px`,
                                  zIndex: ci + 10 // –ü–æ–≤–µ—Ä—Ö –ø–µ–Ω—å–∫–æ–≤
                                }}
                              >
                                <div
                                  className={`${styles.cardOnPenki} ${card.open ? styles.open : styles.closed} ${(isClickableTarget || isClickableOwnCard) && isTopCard ? styles.targetCard : ''}`}
                                  style={{ 
                                    cursor: (isClickableTarget || isClickableOwnCard) && isTopCard ? 'pointer' : 'default',
                                    transform: (isClickableTarget || isClickableOwnCard) && isTopCard ? 'scale(1.05)' : 'scale(1)',
                                    width: card.open ? 105 : 70,
                                    height: card.open ? 157 : 105,
                                   }}
                                  onClick={() => {
                                    console.log(`üéØ [GamePageContent] –ö–õ–ò–ö –ø–æ –∫–∞—Ä—Ç–µ ${p.name}, isTopCard: ${isTopCard}`);
                                    console.log(`üéØ [GamePageContent] - isClickableOwnCard: ${isClickableOwnCard}, isClickableTarget: ${isClickableTarget}`);
                                    if (isTopCard) {
                                      if (isClickableOwnCard) {
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –∫–∞—Ä—Ç–æ–π
                                        if (canPlaceOnSelfInDeckAction) {
                                          console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –∫–ª–∞–¥–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º`);
                                          placeCardOnSelfByRules();
                                        } else if (isCurrentPlayerCard) {
                                          console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –≤—ã–∑—ã–≤–∞–µ–º makeMove('initiate_move')`);
                                          makeMove('initiate_move');
                                        }
                                      } else if (isClickableTarget) {
                                        console.log(`‚úÖ [GamePageContent] –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –≤—ã–∑—ã–≤–∞–µ–º makeMove(${p.id})`);
                                        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –¥–µ–ª–∞–µ–º —Ö–æ–¥
                                        makeMove(p.id);
                                      } else {
                                        console.log(`‚ùå [GamePageContent] –ö–∞—Ä—Ç–∞ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞`);
                                      }
                                    } else {
                                      console.log(`‚ùå [GamePageContent] –ö–ª–∏–∫ –Ω–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–µ`);
                                    }
                                  }}
                                >
                                  <Image
                                    src={
                                      // –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç—ã
                                      (gameStage as number) === 2 && p.id !== currentPlayerId ? 
                                        `/img/cards/back.png` :
                                      // –í 1-–π —Å—Ç–∞–¥–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                                      (card.open && card.image ? `/img/cards/${card.image}` : `/img/cards/back.png`)
                                    }
                                    alt={card.open ? 'card' : 'back'}
                                    width={card.open ? 
                                      (isSmallMobile ? 84 : isMobile ? 95 : 105) : 
                                      (isSmallMobile ? 56 : isMobile ? 63 : 70)
                                    }
                                    height={card.open ? 
                                      (isSmallMobile ? 126 : isMobile ? 142 : 157) : 
                                      (isSmallMobile ? 84 : isMobile ? 95 : 105)
                                    }
                                    draggable={false}
                                    style={{
                                      borderRadius: 0,
                                      transition: 'all 0.3s ease-in-out'
                                    }}
                                  />
                                 </div>
                               </motion.div>
                             );
                           })}
                         </div>
                       )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –≤–Ω–∏–∑—É - —Ç–æ–ª—å–∫–æ –≤–æ 2-–π –∏ 3-–π —Å—Ç–∞–¥–∏—è—Ö */}
          {isGameActive && currentPlayer && currentPlayer.cards.length > 0 && gameStage >= 2 && (
            <div className={styles.playerHand}>
              <div className={styles.handTitle}>
                {stage2TurnPhase === 'selecting_card' ? 'üéØ –í–´–ë–ï–†–ò–¢–ï –ö–ê–†–¢–£' : 'üé¥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã'} ({currentPlayer.cards.length})
                
                {/* –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É" - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ */}
                {gameStage === 2 && tableStack.length > 0 && currentPlayer?.id === currentPlayerId && (
                  <button 
                    className={styles.takeCardFromTableButton}
                    onClick={() => {
                      console.log('üÉè [GamePageContent] –í–∑—è—Ç—å –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞');
                      takeTableCards();
                    }}
                    style={{
                      marginLeft: '15px',
                      padding: '8px 16px',
                      background: '#dc2626',
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      fontSize: '14px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease'
                    }}
                    onMouseEnter={(e) => (e.target as HTMLButtonElement).style.background = '#b91c1c'}
                    onMouseLeave={(e) => (e.target as HTMLButtonElement).style.background = '#dc2626'}
                  >
                    üì• –í–∑—è—Ç—å –∫–∞—Ä—Ç—É
                  </button>
                )}
              </div>
              <div className={styles.handCards}>
                {currentPlayer.cards.map((card, index) => {
                  const isSelectableStage2 = card.open && stage2TurnPhase === 'selecting_card';
                  const isSelected = selectedHandCard?.id === card.id;
                  const baseStep = 10;
                  const mobileSteps = {
                    open: isSmallMobile ? 18 : isMobile ? 21 : 25,
                    closed: isSmallMobile ? 14 : isMobile ? 16 : 18
                  };
                  const step = card.open ? mobileSteps.open : mobileSteps.closed;
                  const cardOffset = index * step;
                  const mobileCardSizes = {
                    open: isSmallMobile ? { w: 70, h: 105 } : isMobile ? { w: 77, h: 115 } : { w: 84, h: 126 },
                    closed: isSmallMobile ? { w: 58, h: 87 } : isMobile ? { w: 64, h: 96 } : { w: 70, h: 105 }
                  };
                  const size = card.open ? mobileCardSizes.open : mobileCardSizes.closed;
                  
                  return (
                    <div 
                      key={card.id} 
                      className={`${styles.handCard} ${card.open ? styles.open : styles.closed} ${isSelectableStage2 ? styles.playable : ''}`}
                      style={{ 
                        position: 'absolute',
                        left: `${cardOffset}px`,
                        top: isSelected ? '-10px' : '0px',
                        zIndex: index + 1,
                        transform: isSelected ? 'scale(1.07)' : 'scale(1)',
                        filter: isSelected ? 'drop-shadow(0 0 10px #00ff00)' : 'none',
                        transition: 'all 0.2s ease-in-out',
                        width: `${size.w}px`,
                        height: `${size.h}px`,
                      }}
                      onClick={() => {
                        // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏
                        if (isSelectableStage2 && gameStage === 2) {
                          selectHandCard(card);
                        }
                      }}
                    >
                      <div className={styles.cardBase} style={{ width: '100%', height: '100%' }}>
                        <Image
                          src={card.open && card.image ? `/img/cards/${card.image}` : `/img/cards/back.png`}
                          alt={card.open ? 'card' : 'back'}
                          width={size.w}
                          height={size.h}
                          draggable={false}
                          priority
                          style={{ 
                            borderRadius: 0,
                            boxShadow: card.open ? '0 2px 10px rgba(0, 0, 0, 0.35)' : '0 2px 8px rgba(0, 0, 0, 0.5)'
                          }}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* –ë—É—Ä–≥–µ—Ä –º–µ–Ω—é */}
          <div className={styles.gameControls}>
            <div className={styles.burgerMenu}>
              <button className={styles.burgerButton}>
                <div className={styles.burgerLines}>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </button>
              <div className={styles.burgerDropdown}>
                <button onClick={() => window.history.back()} className={styles.menuItem}>
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button onClick={() => window.location.reload()} className={styles.menuItem}>
                  üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                </button>
                <button onClick={() => console.log('–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç')} className={styles.menuItem}>
                  üí¨ –ß–∞—Ç
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <BottomNav />
    </div>
  );
}