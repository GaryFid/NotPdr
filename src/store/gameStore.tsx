import React from 'react'
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { createPlayers, generateAvatar } from '../lib/game/avatars'

export interface Card {
  id: string
  type: 'normal' | 'special' | 'pidr'
  title: string
  description: string
  image?: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  effect?: string
  rank?: number // –†–∞–Ω–≥ –∫–∞—Ä—Ç—ã (2-14)
  suit?: string // –ú–∞—Å—Ç—å –∫–∞—Ä—Ç—ã
  open?: boolean // –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞
}

export interface Player {
  id: string
  name: string
  avatar?: string
  score: number
  cards: Card[] // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã)
  penki: Card[] // –ü–µ–Ω—å–∫–∏ (2 –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã –≤ 3-–π —Å—Ç–∞–¥–∏–∏)
  playerStage: 1 | 2 | 3 // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è –∏–≥—Ä–æ–∫–∞
  isCurrentPlayer: boolean
  isUser?: boolean // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  isBot?: boolean // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –±–æ—Ç–æ–º
  difficulty?: 'easy' | 'medium' | 'hard' // –°–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞
}

export interface GameStats {
  gamesPlayed: number
  gamesWon: number
  totalScore: number
  bestScore: number
  cardsCollected: number
  achievements: string[]
}

export interface GameSettings {
  soundEnabled: boolean
  animationsEnabled: boolean
  hapticEnabled: boolean
  autoPlay: boolean
  difficulty: 'easy' | 'medium' | 'hard'
}

interface GameState {
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isGameActive: boolean
  gameMode: 'single' | 'multiplayer'
  currentRound: number
  maxRounds: number
  players: Player[]
  currentPlayerId: string | null
  deck: Card[]
  playedCards: Card[]
  lastPlayedCard: Card | null
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
  gameStage: 1 | 2 | 3
  availableTargets: number[] // –ò–Ω–¥–µ–∫—Å—ã –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É
  mustDrawFromDeck: boolean // –î–æ–ª–∂–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
  canPlaceOnSelf: boolean // –ú–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É —Å–µ–±–µ
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  turnPhase: 'analyzing_hand' | 'showing_deck_hint' | 'deck_card_revealed' | 'waiting_deck_action' | 'showing_card_actions' | 'waiting_target_selection' | 'turn_ended'
  revealedDeckCard: Card | null // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞ –æ—Ç –∫–æ–ª–æ–¥—ã)
  canPlaceOnSelfByRules: boolean // –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  skipHandAnalysis: boolean // –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏ –ø–æ—Å–ª–µ —É–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ–±—è
  
  // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  lastDrawnCard: Card | null // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã
  lastPlayerToDrawCard: string | null // ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∑—è–ª –∫–∞—Ä—Ç—É
  trumpSuit: 'clubs' | 'diamonds' | 'hearts' | 'spades' | null // –ö–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  drawnHistory: Card[] // –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±—Ä–∞–Ω–Ω—ã—Ö/–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–∑—ã—Ä—è)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
  tableStack: Card[] // –°—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ (–Ω–∏–∂–Ω—è—è = –ø–µ—Ä–≤–∞—è, –≤–µ—Ä—Ö–Ω—è—è = –ø–æ—Å–ª–µ–¥–Ω—è—è)
  selectedHandCard: Card | null // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ (–¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
  stage2TurnPhase: 'selecting_card' | 'playing_card' | 'waiting_beat' | 'round_complete' // –§–∞–∑—ã —Ö–æ–¥–∞ 2-–π —Å—Ç–∞–¥–∏–∏
  roundInProgress: boolean // –ò–¥–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –±–∏—Ç—å—è
  currentRoundInitiator: string | null // –ö—Ç–æ –Ω–∞—á–∞–ª —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  stats: GameStats
  settings: GameSettings
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  selectedCard: Card | null
  showCardDetails: boolean
  isLoading: boolean
  notification: {
    message: string
    type: 'success' | 'error' | 'warning' | 'info'
    visible: boolean
  } | null
  
  // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
  startGame: (mode: 'single' | 'multiplayer', playersCount?: number) => void
  endGame: () => void
  playCard: (cardId: string) => void
  drawCard: () => void
  nextTurn: () => void
  resetGame: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è P.I.D.R –∏–≥—Ä—ã
  getCardRank: (imageName: string) => number
  findAvailableTargets: (currentPlayerId: string) => number[]
  canMakeMove: (currentPlayerId: string) => boolean
  makeMove: (targetPlayerId: string) => void
  drawCardFromDeck: () => boolean // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞
  placeCardOnSelf: () => void
  checkStage1End: () => void
  processPlayerTurn: (playerId: string) => void
  determineTrumpSuit: () => 'clubs' | 'diamonds' | 'hearts' | 'spades' | null
  getCardSuit: (imageName: string) => 'clubs' | 'diamonds' | 'hearts' | 'spades' | 'unknown'
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ö–æ–¥–∞
  revealDeckCard: () => boolean
  canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => boolean  
  placeCardOnSelfByRules: () => void
  takeCardNotByRules: () => void // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç (–µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤)
  resetTurnState: () => void
  onDeckClick: () => void
  findAvailableTargetsForDeckCard: (deckCard: Card) => number[]
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏
  selectHandCard: (card: Card) => void
  playSelectedCard: () => void
  canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => boolean
  beatCard: (defendCard: Card) => void
  takeTableCards: () => void
  checkRoundComplete: () => boolean
  initializeStage2: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è 3-–π —Å—Ç–∞–¥–∏–∏
  checkStage3Transition: (playerId: string) => void
  activatePenki: (playerId: string) => void
  checkVictoryCondition: () => void
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
  selectCard: (card: Card | null) => void
  addCardToDeck: (card: Card) => void
  removeCardFromDeck: (cardId: string) => void
  
  // –ò–≥—Ä–æ–∫–∏
  addPlayer: (name: string) => void
  removePlayer: (playerId: string) => void
  updatePlayerScore: (playerId: string, score: number) => void
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  updateSettings: (settings: Partial<GameSettings>) => void
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  updateStats: (stats: Partial<GameStats>) => void
  addAchievement: (achievementId: string) => void
  
  // UI
  showNotification: (message: string, type: 'success' | 'error' | 'warning' | 'info', duration?: number) => void
  hideNotification: () => void
  setLoading: (loading: boolean) => void
}

// –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã P.I.D.R.
const DEFAULT_CARDS: Card[] = [
  {
    id: '1',
    type: 'normal',
    title: '–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤',
    rarity: 'common'
  },
  {
    id: '2',
    type: 'special',
    title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ö–∞—Ä—Ç–∞ —Å –æ—Å–æ–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º',
    rarity: 'rare',
    effect: 'draw_extra'
  },
  {
    id: '3',
    type: 'pidr',
    title: 'P.I.D.R.',
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ P.I.D.R.!',
    rarity: 'legendary',
    effect: 'pidr_power'
  }
]

// –°–æ–∑–¥–∞–Ω–∏–µ Zustand —Å—Ç–æ—Ä–∞ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isGameActive: false,
      gameMode: 'single',
      currentRound: 0,
      maxRounds: 10,
      players: [],
      currentPlayerId: null,
      deck: [...DEFAULT_CARDS],
      playedCards: [],
      lastPlayedCard: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
      gameStage: 1,
      availableTargets: [],
      mustDrawFromDeck: false,
      canPlaceOnSelf: false,
      
      // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      lastDrawnCard: null,
      lastPlayerToDrawCard: null,
      trumpSuit: null,
      drawnHistory: [],
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
      tableStack: [],
      selectedHandCard: null,
      stage2TurnPhase: 'selecting_card',
      roundInProgress: false,
      currentRoundInitiator: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
      turnPhase: 'analyzing_hand',
      revealedDeckCard: null,
      canPlaceOnSelfByRules: false,
      skipHandAnalysis: false,
      
      stats: {
        gamesPlayed: 0,
        gamesWon: 0,
        totalScore: 0,
        bestScore: 0,
        cardsCollected: 0,
        achievements: []
      },
      
      settings: {
        soundEnabled: true,
        animationsEnabled: true,
        hapticEnabled: true,
        autoPlay: false,
        difficulty: 'medium'
      },
      
      selectedCard: null,
      showCardDetails: false,
      isLoading: false,
      notification: null,
      
      // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      startGame: (mode, playersCount = 2) => {
        console.log('üéÆ [GameStore] startGame –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { mode, playersCount });
        
        try {
          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç (52 –∫–∞—Ä—Ç—ã)
          console.log('üéÆ [GameStore] –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É...');
        const standardDeck = [
          // –î–≤–æ–π–∫–∏ (2)
          '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
          // –¢—Ä–æ–π–∫–∏ (3) 
          '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
          // –ß–µ—Ç–≤–µ—Ä–∫–∏ (4)
          '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
          // –ü—è—Ç–µ—Ä–∫–∏ (5)
          '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
          // –®–µ—Å—Ç–µ—Ä–∫–∏ (6)
          '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
          // –°–µ–º–µ—Ä–∫–∏ (7)
          '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
          // –í–æ—Å—å–º–µ—Ä–∫–∏ (8)
          '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
          // –î–µ–≤—è—Ç–∫–∏ (9)
          '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
          // –î–µ—Å—è—Ç–∫–∏ (10)
          '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
          // –í–∞–ª–µ—Ç—ã (11)
          'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
          // –î–∞–º—ã (12)
          'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
          // –ö–æ—Ä–æ–ª–∏ (13)
          'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
          // –¢—É–∑—ã (14)
          'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 52 –∫–∞—Ä—Ç—ã
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        const shuffledImages = [...standardDeck].sort(() => Math.random() - 0.5);
        
        const players: Player[] = []
        const cardsPerPlayer = 3;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∏ –±–æ—Ç–∞–º–∏
        console.log('üéÆ [GameStore] –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...');
        const playerInfos = createPlayers(playersCount, 0); // 0 - –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üéÆ [GameStore] –ò–≥—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', playerInfos);
        
        for (let i = 0; i < playersCount; i++) {
          const playerInfo = playerInfos[i];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ playerInfo –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
          if (!playerInfo) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${i + 1}`);
          }
          
          const playerOpenCards: Card[] = []; // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (–¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏)
          const playerPenki: Card[] = []; // –ü–µ–Ω—å–∫–∏ (2 –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã)
          
          // –†–∞–∑–¥–∞–µ–º 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
          for (let j = 0; j < cardsPerPlayer; j++) {
            const cardIndex = i * cardsPerPlayer + j;
            const imageName = shuffledImages[cardIndex];
            
            const card: Card = {
              id: `card_${i}_${j}`,
              type: 'normal',
              title: `–ö–∞—Ä—Ç–∞ ${j + 1}`,
              description: '',
              image: imageName,
              rarity: 'common',
              rank: get().getCardRank(imageName),
              open: false, // –ü–æ–∫–∞ –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã
            };
            
            if (j < 2) {
              // –ü–µ—Ä–≤—ã–µ 2 –∫–∞—Ä—Ç—ã = –ø–µ–Ω—å–∫–∏ (–∑–∞–∫—Ä—ã—Ç—ã–µ)
              playerPenki.push(card);
            } else {
              // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ = –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏
              card.open = true;
              playerOpenCards.push(card);
            }
          }
          
          console.log(`üéÆ [GameStore] –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ ${i + 1}:`, playerInfo);
          
          players.push({
            id: `player_${i + 1}`,
            name: playerInfo.name,
            avatar: playerInfo.avatar,
            score: 0,
            cards: playerOpenCards, // –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω—è—è –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
            penki: playerPenki, // 2 –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
            playerStage: 1, // –í—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 1-–π —Å—Ç–∞–¥–∏–∏
            isCurrentPlayer: i === 0,
            isUser: !playerInfo.isBot,
            isBot: playerInfo.isBot,
            difficulty: playerInfo.difficulty
          });
          
          console.log(`üéÆ [GameStore] –ò–≥—Ä–æ–∫ ${i + 1} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        }
        
        // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
        const remainingCards: Card[] = shuffledImages.slice(playersCount * cardsPerPlayer).map((imageName, index) => ({
          id: `deck_card_${index}`,
          type: 'normal',
          title: `–ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–¥—ã`,
          description: '',
          image: imageName,
          rarity: 'common',
          rank: get().getCardRank(imageName),
          open: false,
        }));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—Ç–∞—Ä—à–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–µ
        let firstPlayerIndex = 0;
        let maxRank = 0;
        players.forEach((player, index) => {
          const topCard = player.cards[player.cards.length - 1];
          if (topCard && topCard.rank && topCard.rank > maxRank) {
            maxRank = topCard.rank;
            firstPlayerIndex = index;
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        players.forEach((player, index) => {
          player.isCurrentPlayer = index === firstPlayerIndex;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        get().resetTurnState();
        
        set({
          isGameActive: true,
          gameMode: mode,
          currentRound: 1,
          players,
          currentPlayerId: players[firstPlayerIndex].id,
          deck: remainingCards,
          playedCards: [],
          lastPlayedCard: null,
          gameStage: 1,
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
          lastDrawnCard: null,
          lastPlayerToDrawCard: null,
          trumpSuit: null,
          drawnHistory: []
        });
        
        console.log('üéÆ [GameStore] –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
        get().showNotification(`–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –•–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º: ${players[firstPlayerIndex].name}`, 'success');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        console.log('üéÆ [GameStore] –ó–∞–ø—É—Å–∫–∞–µ–º processPlayerTurn —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
        setTimeout(() => {
          get().processPlayerTurn(players[firstPlayerIndex].id);
        }, 1000);
        
        console.log('üéÆ [GameStore] startGame –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
        } catch (error) {
          console.error('üö® [GameStore] –û–®–ò–ë–ö–ê –í startGame:', error);
          console.error('Stack trace:', (error as Error).stack);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          set({
            isGameActive: false,
            isLoading: false
          });
          
          // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
          throw error;
        }
      },
      
      endGame: () => {
        // –£–°–¢–ê–†–ï–õ–û: –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ checkVictoryCondition
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        console.log('üéÆ [endGame] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã');
        
        set({
          isGameActive: false
        });
        
        get().showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info', 3000);
      },
      
      playCard: (cardId) => {
        const { players, currentPlayerId, playedCards } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer) return
        
        const cardIndex = currentPlayer.cards.findIndex(c => c.id === cardId)
        if (cardIndex === -1) return
        
        const playedCard = currentPlayer.cards[cardIndex]
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        currentPlayer.cards.splice(cardIndex, 1)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ
        const newPlayedCards = [...playedCards, playedCard]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
        let scoreBonus = 10
        if (playedCard.rarity === 'rare') scoreBonus = 20
        if (playedCard.rarity === 'epic') scoreBonus = 50
        if (playedCard.rarity === 'legendary') scoreBonus = 100
        
        currentPlayer.score += scoreBonus
        
        set({
          players: [...players],
          playedCards: newPlayedCards,
          lastPlayedCard: playedCard
        })
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã
        if (playedCard.effect === 'pidr_power') {
          get().showNotification('P.I.D.R. –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!', 'success')
          currentPlayer.score += 50 // –ë–æ–Ω—É—Å –∑–∞ P.I.D.R.
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
        setTimeout(() => get().nextTurn(), 1000)
      },
      
      drawCard: () => {
        const { players, currentPlayerId, deck } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer || deck.length === 0) return // –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–¥—ã
        
        const drawnCard = deck[0]
        currentPlayer.cards.push(drawnCard)
        
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck
        })
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –æ–ø—É—Å—Ç–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –≤ 1-–π —Å—Ç–∞–¥–∏–∏)
        const { gameStage } = get();
        if (gameStage === 1 && newDeck.length === 0) {
          console.log(`üÉè [drawCard] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 1500);
        }
        
        get().showNotification('–ö–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞!', 'info')
      },
      
      nextTurn: () => {
        const { players, currentPlayerId, currentRound, maxRounds, gameStage } = get()
        
        const currentPlayerName = players.find(p => p.id === currentPlayerId)?.name || currentPlayerId;
        console.log(`üîÑ [nextTurn] –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞ –æ—Ç ${currentPlayerName} (–Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ —Ö–æ–¥–∏—Ç—å)`);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const currentIndex = players.findIndex(p => p.id === currentPlayerId)
        const nextIndex = (currentIndex + 1) % players.length
        const nextPlayerId = players[nextIndex].id
        const nextPlayer = players[nextIndex]
        
        console.log(`üîÑ [nextTurn] –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${nextPlayer.name} (–∏–Ω–¥–µ–∫—Å ${nextIndex})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach(p => p.isCurrentPlayer = p.id === nextPlayerId)
        
        let newRound = currentRound
        
        // –ï—Å–ª–∏ –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É)
        if (nextIndex === 0) {
          newRound = currentRound + 1
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è 1-–π —Å—Ç–∞–¥–∏–∏
        if (gameStage === 1) {
          get().resetTurnState();
        }
        
        set({
          players: [...players],
          currentPlayerId: nextPlayerId,
          currentRound: newRound
        })
        
        get().showNotification(`–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${nextPlayer.name}`, 'info')
        
        console.log(`üîÑ [nextTurn] –ó–∞–ø—É—Å–∫–∞–µ–º processPlayerTurn –¥–ª—è ${nextPlayer.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ 3-–π —Å—Ç–∞–¥–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Ö–æ–¥
        if (gameStage === 2) {
          get().checkStage3Transition(nextPlayerId);
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        get().checkVictoryCondition();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏
        if (gameStage === 1) {
          setTimeout(() => get().processPlayerTurn(nextPlayerId), 1000)
        } else if (gameStage === 2) {
          // –î–ª—è 2-–π —Å—Ç–∞–¥–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
          set({ stage2TurnPhase: 'selecting_card' });
          setTimeout(() => get().processPlayerTurn(nextPlayerId), 1000)
        }
        
        // –£–î–ê–õ–ï–ù–û: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ maxRounds
        // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∫–∞—Ä—Ç (checkVictoryCondition)
      },
      
      resetGame: () => {
        set({
          isGameActive: false,
          currentRound: 0,
          players: [],
          currentPlayerId: null,
          deck: [...DEFAULT_CARDS],
          playedCards: [],
          lastPlayedCard: null,
          selectedCard: null
        })
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
      selectCard: (card) => set({ selectedCard: card }),
      
      addCardToDeck: (card) => {
        const { deck } = get()
        set({ deck: [...deck, card] })
      },
      
      removeCardFromDeck: (cardId) => {
        const { deck } = get()
        set({ deck: deck.filter(c => c.id !== cardId) })
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏
      addPlayer: (name) => {
        const { players } = get()
        const newPlayer: Player = {
          id: `player_${Date.now()}`,
          name,
          score: 0,
          cards: [],
          penki: [],
          playerStage: 1,
          isCurrentPlayer: false
        }
        set({ players: [...players, newPlayer] })
      },
      
      removePlayer: (playerId) => {
        const { players } = get()
        set({ players: players.filter(p => p.id !== playerId) })
      },
      
      updatePlayerScore: (playerId, score) => {
        const { players } = get()
        const player = players.find(p => p.id === playerId)
        if (player) {
          player.score = score
          set({ players: [...players] })
        }
      },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      updateSettings: (newSettings) => {
        const { settings } = get()
        set({ settings: { ...settings, ...newSettings } })
      },
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      updateStats: (newStats) => {
        const { stats } = get()
        set({ stats: { ...stats, ...newStats } })
      },
      
      addAchievement: (achievementId) => {
        const { stats } = get()
        if (!stats.achievements.includes(achievementId)) {
          set({
            stats: {
              ...stats,
              achievements: [...stats.achievements, achievementId]
            }
          })
          get().showNotification('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', 'success')
        }
      },
      
      // UI
      showNotification: (message, type, duration = 3000) => {
        set({
          notification: {
            message,
            type,
            visible: true
          }
        })
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã)
        setTimeout(() => get().hideNotification(), duration)
      },
      
      hideNotification: () => {
        set({ notification: null })
      },
      
      setLoading: (loading) => set({ isLoading: loading }),
      
      // ===== –ú–ï–¢–û–î–´ –î–õ–Ø P.I.D.R –ò–ì–†–´ =====
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∫–∞—Ä—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      getCardRank: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        let rank = 0;
        if (name.startsWith('ace')) rank = 14;
        else if (name.startsWith('king')) rank = 13;
        else if (name.startsWith('queen')) rank = 12;
        else if (name.startsWith('jack')) rank = 11;
        else {
          const match = name.match(/(\d+)_of/);
          rank = match ? parseInt(match[1], 10) : 0;
        }
        console.log(`üé¥ [getCardRank] ${imageName} ‚Üí ${name} ‚Üí —Ä–∞–Ω–≥: ${rank}`);
        return rank;
      },
      
      // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
      findAvailableTargets: (currentPlayerId: string) => {
        const { players } = get();
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return [];
        
        // –ë–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
        const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
        if (!topCard || !topCard.open) return [];
        
        const currentRank = get().getCardRank(topCard.image || '');
        console.log(`üéØ [findAvailableTargets] –ò–≥—Ä–æ–∫ ${currentPlayer.name}, –∫–∞—Ä—Ç–∞: ${topCard.image}, —Ä–∞–Ω–≥: ${currentRank}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª P.I.D.R.
        // –ü–†–ê–í–ò–õ–û: –ò—â–µ–º —É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –ù–ò–ñ–ï –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã
        // –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø: 
        // 1) –¢–æ–ª—å–∫–æ –¥–≤–æ–π–∫–∞ (2) –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –¢—É–∑ (14)!
        // 2) –¢—É–∑ (14) –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –ö–æ—Ä–æ–ª—è (13)!
        let targetRank: number;
        
        if (currentRank === 2) {
          // –î–≤–æ–π–∫–∞ –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢—É–∑ (14) - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï!
          targetRank = 14;
        } else {
          // –û–±—ã—á–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏—â–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
          // –¢—É–∑(14) ‚Üí –ö–æ—Ä–æ–ª—å(13), –ö–æ—Ä–æ–ª—å(13) ‚Üí –î–∞–º–∞(12), –î–∞–º–∞(12) ‚Üí –í–∞–ª–µ—Ç(11), ..., 3 ‚Üí 2
          targetRank = currentRank - 1;
        }
        
        console.log(`üéØ [findAvailableTargets] –ò—â–µ–º —Ü–µ–ª–∏ —Å —Ä–∞–Ω–≥–æ–º: ${targetRank}`);
        
        const targets: number[] = [];
        players.forEach((player, index) => {
          if (player.id === currentPlayerId) return; // –ù–µ –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è (–ø–æ–∫–∞)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
          const playerTopCard = player.cards[player.cards.length - 1];
          if (playerTopCard && playerTopCard.open) {
            const playerRank = get().getCardRank(playerTopCard.image || '');
            console.log(`üéØ [findAvailableTargets] –°–æ–ø–µ—Ä–Ω–∏–∫ ${player.name}, –∫–∞—Ä—Ç–∞: ${playerTopCard.image}, —Ä–∞–Ω–≥: ${playerRank}`);
            if (playerRank === targetRank) {
              console.log(`‚úÖ [findAvailableTargets] –ù–ê–ô–î–ï–ù–ê –¶–ï–õ–¨: ${player.name} (–∏–Ω–¥–µ–∫—Å ${index})`);
              targets.push(index);
            }
          }
        });
        
        console.log(`üéØ [findAvailableTargets] –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: ${targets.length}, –º–∞—Å—Å–∏–≤: [${targets.join(', ')}]`);
        return targets;
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
      canMakeMove: (currentPlayerId: string) => {
        const targets = get().findAvailableTargets(currentPlayerId);
        console.log(`üéØ [canMakeMove] –ò–≥—Ä–æ–∫ ${currentPlayerId}, –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π: ${targets.length}, —Ü–µ–ª–∏: [${targets.join(', ')}]`);
        return targets.length > 0;
      },
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      makeMove: (targetPlayerId: string) => {
        const { players, currentPlayerId, revealedDeckCard, turnPhase } = get();
        if (!currentPlayerId) return;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ö–æ–¥–∞
        if (targetPlayerId === 'initiate_move') {
          // –ò–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω—É–ª –ø–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
          const targets = get().findAvailableTargets(currentPlayerId);
          set({ 
            turnPhase: 'waiting_target_selection',
            availableTargets: targets
          });
          get().showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ö–æ–¥–∞', 'info');
          return;
        }
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        const targetPlayer = players.find(p => p.id === targetPlayerId);
        
        if (!currentPlayer || !targetPlayer) return;
        
        let cardToMove: Card | undefined;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        if (revealedDeckCard && (turnPhase === 'waiting_target_selection' || turnPhase === 'waiting_deck_action')) {
          // –•–æ–¥–∏–º –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
          cardToMove = revealedDeckCard;
          
          // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const { deck } = get();
          const newDeck = deck.slice(1);
          set({
            deck: newDeck,
            revealedDeckCard: null,
            lastDrawnCard: cardToMove,
            lastPlayerToDrawCard: currentPlayerId,
            turnPhase: 'turn_ended'
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
          if (newDeck.length === 0) {
            console.log(`üÉè [makeMove] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
            setTimeout(() => {
              get().checkStage1End();
            }, 1000);
          }
        } else {
          // –•–æ–¥–∏–º –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏
          if (currentPlayer.cards.length === 0) return;
          
          // –•–æ–¥–∏–º –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏ (—É–¥–∞–ª—è–µ–º –µ–µ –∏–∑ —Å—Ç–æ–ø–∫–∏)
          cardToMove = currentPlayer.cards.pop();
          
          set({ 
            players: [...players],
            skipHandAnalysis: false // –ü–æ—Å–ª–µ —Ö–æ–¥–∞ –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏
          });
        }
        
        if (!cardToMove) return;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        targetPlayer.cards.push(cardToMove);
        
        set({ 
          players: [...players]
        });
        
        get().showNotification(`–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–ª–æ–∂–µ–Ω–∞ –Ω–∞ ${targetPlayer.name}!`, 'success');
        
        console.log(`üîÑ [makeMove] –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ö–æ–¥–∏—Ç—å`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫ –ü–†–û–î–û–õ–ñ–ê–ï–¢ —Ö–æ–¥–∏—Ç—å (–∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏)
        // –•–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ —Ö–æ–¥–∏—Ç—å
        get().resetTurnState();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞
        get().checkVictoryCondition();
        
        setTimeout(() => {
          get().processPlayerTurn(currentPlayerId);
        }, 1000);
      },
      
      // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
      drawCardFromDeck: () => {
        const { deck, players, currentPlayerId, gameStage } = get();
        if (deck.length === 0 || !currentPlayerId) return false; // –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–¥—ã
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return false;
        
        const drawnCard = deck[0];
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥ –∫ –∫–∞—Ä—Ç–µ
        drawnCard.rank = get().getCardRank(drawnCard.image || '');
        drawnCard.open = true;
        
        // –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç (–≤ —Å—Ç–æ–ø–∫—É)
        currentPlayer.cards.push(drawnCard);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({ 
          deck: newDeck,
          players: [...players],
          lastDrawnCard: drawnCard,
          lastPlayerToDrawCard: currentPlayerId
        });
        // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        // set({ drawnHistory: [...get().drawnHistory, drawnCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –µ—Å–ª–∏ –º—ã –≤ 1-–π —Å—Ç–∞–¥–∏–∏ –∏ –∫–æ–ª–æ–¥–∞ –æ–ø—É—Å—Ç–µ–ª–∞
        if (gameStage === 1 && newDeck.length === 0) {
          console.log(`üÉè [drawCardFromDeck] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 1500);
        }
        
        get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–æ—Å—Ç–∞–ª–æ—Å—å: ${newDeck.length})`, 'info');
        return true;
      },
      
      // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è
      placeCardOnSelf: () => {
        const { players, currentPlayerId } = get();
        if (!currentPlayerId) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return;
        
        // –ö–∞—Ä—Ç–∞ —É–∂–µ –ª–µ–∂–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        set({ 
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          availableTargets: [] // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        });
        
        get().showNotification(`${currentPlayer.name} –æ—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç—É —É —Å–µ–±—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥`, 'warning');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π —Ö–æ–¥–∞
        get().checkStage1End();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        setTimeout(() => get().nextTurn(), 1000);
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è 1-–π —Å—Ç–∞–¥–∏–∏
      checkStage1End: () => {
        const { deck, gameStage, lastPlayerToDrawCard, players } = get();
        if (gameStage !== 1 || deck.length > 0) return;
        

        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const trumpSuit = get().determineTrumpSuit();

        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑—è–≤—à–∏–π –∫–∞—Ä—Ç—É)
        let startingPlayerId = lastPlayerToDrawCard || players[0].id;

        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
        players.forEach(p => {
          p.isCurrentPlayer = p.id === startingPlayerId;
          p.playerStage = 2; // –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –≤–æ 2-—é —Å—Ç–∞–¥–∏—é
        });
        
        set({ 
          gameStage: 2,
          availableTargets: [],
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          trumpSuit: trumpSuit,
          currentPlayerId: startingPlayerId,
          players: [...players],
          currentRound: 1 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 2-—é —Å—Ç–∞–¥–∏—é
        get().initializeStage2();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ (–ø–æ 5 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥–æ–µ)
        setTimeout(() => {
          get().showNotification('üéâ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success', 5000);
          
          setTimeout(() => {
            const startingPlayer = players.find(p => p.id === startingPlayerId);
            get().showNotification(`üöÄ –í—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è! –•–æ–¥–∏—Ç: ${startingPlayer?.name || '–ò–≥—Ä–æ–∫'}`, 'info', 5000);
            
            setTimeout(() => {
              const trumpName = trumpSuit === 'clubs' ? '–¢—Ä–µ—Ñ—ã' : 
                              trumpSuit === 'diamonds' ? '–ë—É–±–Ω—ã' :
                              trumpSuit === 'hearts' ? '–ß–µ—Ä–≤—ã' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
              // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–∏–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–∑—ã—Ä–µ–º!
              get().showNotification(`üÉè –ö–æ–∑—ã—Ä—å: ${trumpName} (–ü–∏–∫–∏ –Ω–µ –∫–æ–∑—ã—Ä—å!)`, 'warning', 5000);
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ "–ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏!"
              setTimeout(() => {
                get().showNotification('‚ö†Ô∏è –ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏!', 'error', 5000);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞ –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏
                setTimeout(() => {
                  get().processPlayerTurn(startingPlayerId);
                }, 1000);
              }, 3000);
            }, 3000);
          }, 3000);
        }, 1000);
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ (–ù–û–í–ê–Ø –ª–æ–≥–∏–∫–∞)
      processPlayerTurn: (playerId: string) => {
        const { gameStage, players, skipHandAnalysis, deck } = get();
        const currentPlayer = players.find(p => p.id === playerId);
        if (!currentPlayer) return;
        
        console.log(`üéÆ [processPlayerTurn] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –¥–ª—è ${currentPlayer.name} (—Å—Ç–∞–¥–∏—è ${gameStage}, –±–æ—Ç: ${currentPlayer.isBot})`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ 1-—é —Ç–∞–∫ –∏ 2-—é —Å—Ç–∞–¥–∏–∏
        if (gameStage === 2) {

          // –î–ª—è 2-–π —Å—Ç–∞–¥–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
          set({ stage2TurnPhase: 'selecting_card' });
          
          if (currentPlayer.isBot) {
            console.log(`ü§ñ [processPlayerTurn Stage2] –ë–æ—Ç ${currentPlayer.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É`);
            // –î–ª—è –±–æ—Ç–∞ - –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ useEffect –≤ GamePageContent
            // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            get().showNotification(`${currentPlayer.name} (–±–æ—Ç) –¥—É–º–∞–µ—Ç...`, 'info', 2000);
          } else {
            get().showNotification(`${currentPlayer.name}: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞`, 'info', 5000);
          }
          return;
        }
        
        if (gameStage !== 1 && gameStage !== 3) return; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 1-—é –∏ 3-—é —Å—Ç–∞–¥–∏–∏
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
        const openCards = currentPlayer.cards.filter(c => c.open);
        
        // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        if (!skipHandAnalysis && currentPlayer.cards.length > 0) {
          console.log(`üéÆ [processPlayerTurn] –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ –¥–ª—è ${currentPlayer.name}`);
          
          if (get().canMakeMove(playerId)) {
            // –ú–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å - –¥–ª—è –±–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Ö–æ–¥, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–¥–µ–º –∫–ª–∏–∫–∞
            const targets = get().findAvailableTargets(playerId);
            console.log(`‚úÖ [processPlayerTurn] –ò–≥—Ä–æ–∫ –ú–û–ñ–ï–¢ —Ö–æ–¥–∏—Ç—å, —Ü–µ–ª–∏: [${targets.join(', ')}]`);

            set({ 
              availableTargets: targets,
              turnPhase: 'analyzing_hand'
            });
            
            if (currentPlayer.isBot) {
              console.log(`ü§ñ [processPlayerTurn] –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥ –∏–∑ —Ä—É–∫–∏`);
              // –î–ª—è –±–æ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–ª—å –∏ –¥–µ–ª–∞–µ–º —Ö–æ–¥
              setTimeout(() => {
                if (targets.length > 0) {
                  const targetIndex = targets[0];
                  const targetPlayer = players[targetIndex];
                  console.log(`ü§ñ [processPlayerTurn] –ë–æ—Ç —Ö–æ–¥–∏—Ç –Ω–∞ ${targetPlayer?.name} (–∏–Ω–¥–µ–∫—Å ${targetIndex})`);
                  get().makeMove('initiate_move'); // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ö–æ–¥
                  setTimeout(() => {
                    get().makeMove(targetPlayer?.id || ''); // –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º —Ö–æ–¥ –Ω–∞ —Ü–µ–ª—å
                  }, 500);
                } else {
                  console.log(`ü§ñ [processPlayerTurn] –£ –±–æ—Ç–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Ö–æ–¥–∞`);
                }
              }, 1000);
            } else {
              get().showNotification(`${currentPlayer.name}: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞`, 'info');
            }
            return; // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
          } else {
            console.log(`‚ùå [processPlayerTurn] –ò–≥—Ä–æ–∫ –ù–ï –ú–û–ñ–ï–¢ —Ö–æ–¥–∏—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–ª–æ–¥–µ`);

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–ª–æ–¥–µ
            set({ 
              availableTargets: [],
              canPlaceOnSelf: false,
              turnPhase: 'showing_deck_hint'
            });
            
            if (currentPlayer.isBot) {
              console.log(`ü§ñ [processPlayerTurn] –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ`);
              // –î–ª—è –±–æ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–æ–ª–æ–¥–µ
              setTimeout(() => {
                get().onDeckClick();
              }, 1000);
            } else {
              get().showNotification(`${currentPlayer.name}: –Ω–µ—Ç —Ö–æ–¥–æ–≤ –∏–∑ —Ä—É–∫–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É`, 'warning');
            }
            return; // –ñ–¥–µ–º –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ
          }
        } else if (skipHandAnalysis) {
          set({ skipHandAnalysis: false }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
        
        // –≠–¢–ê–ü 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–æ–¥–æ–π
        if (deck.length === 0) {
          // –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2
          get().checkStage1End();
          return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–ª–æ–¥—É
        set({ turnPhase: 'showing_deck_hint' });
        
        if (currentPlayer.isBot) {
          console.log(`ü§ñ [processPlayerTurn] –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ (—ç—Ç–∞–ø 2)`);
          // –î–ª—è –±–æ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–æ–ª–æ–¥–µ
          setTimeout(() => {
            get().onDeckClick();
          }, 1000);
        } else {
          get().showNotification(`${currentPlayer.name}: –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É`, 'info');
        }
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ
      onDeckClick: () => {
        const { turnPhase, currentPlayerId, players, revealedDeckCard } = get();
        if (turnPhase !== 'showing_deck_hint' || !currentPlayerId) return;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–†–£–Æ –õ–û–ì–ò–ö–£)
        if (!get().revealDeckCard()) {
          // revealDeckCard —É–∂–µ –≤—ã–∑–≤–∞–ª checkStage1End –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          return;
        }
        
        // –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É (–∫–∞–∫ –∏ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        const { revealedDeckCard: newRevealedCard } = get();
        if (!newRevealedCard) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
        const deckTargets = get().findAvailableTargetsForDeckCard(newRevealedCard);
        const canMoveToOpponents = deckTargets.length > 0;
        
        let canPlaceOnSelfByRules = false;
        if (currentPlayer.cards.length > 0) {
          const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
          canPlaceOnSelfByRules = get().canPlaceCardOnSelf(newRevealedCard, topCard);
          console.log(`üéØ [onDeckClick] –ü—Ä–æ–≤–µ—Ä–∫–∞ canPlaceCardOnSelf:`);
          console.log(`üéØ [onDeckClick] - –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã: ${newRevealedCard.image} (—Ä–∞–Ω–≥ ${get().getCardRank(newRevealedCard.image || '')})`);
          console.log(`üéØ [onDeckClick] - –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞ –∏–≥—Ä–æ–∫–∞: ${topCard.image} (—Ä–∞–Ω–≥ ${get().getCardRank(topCard.image || '')})`);
          console.log(`üéØ [onDeckClick] - –†–µ–∑—É–ª—å—Ç–∞—Ç canPlaceCardOnSelf: ${canPlaceOnSelfByRules}`);
        }
        
        set({
          turnPhase: 'waiting_deck_action',
          canPlaceOnSelfByRules: canPlaceOnSelfByRules,
          availableTargets: canMoveToOpponents ? deckTargets : []
        });
        
        // –î–ª—è –±–æ—Ç–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if (currentPlayer.isBot) {
          console.log(`ü§ñ [onDeckClick] –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã:`);
          console.log(`ü§ñ [onDeckClick] - canMoveToOpponents: ${canMoveToOpponents}, targets: [${deckTargets.join(', ')}]`);
          console.log(`ü§ñ [onDeckClick] - canPlaceOnSelfByRules: ${canPlaceOnSelfByRules}`);
          
          setTimeout(() => {
            if (canMoveToOpponents) {
              // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
              const targetIndex = deckTargets[0];
              const targetPlayer = players[targetIndex];
              console.log(`ü§ñ [onDeckClick] –ë–æ—Ç —Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ ${targetPlayer?.name}`);
              get().makeMove(targetPlayer?.id || '');
            } else if (canPlaceOnSelfByRules) {
              // –í—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
              console.log(`ü§ñ [onDeckClick] –ë–æ—Ç –∫–ª–∞–¥–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º`);
              get().placeCardOnSelfByRules();
            } else {
              // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–∑—è—Ç—å –ø–æ–≤–µ—Ä—Ö
              console.log(`ü§ñ [onDeckClick] –ë–æ—Ç –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç`);
              get().takeCardNotByRules();
            }
          }, 1500);
        } else {
          // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
          if (canMoveToOpponents) {
            get().showNotification('–í—ã–±–µ—Ä–∏—Ç–µ: —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è', 'info');
          } else if (canPlaceOnSelfByRules) {
            get().showNotification('–ú–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º', 'info');
          } else {
            get().showNotification('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ - –∫–∞—Ä—Ç–∞ –ª–æ–∂–∏—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç', 'warning');
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞–¥–µ–º –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              get().takeCardNotByRules();
            }, 2000);
          }
        }
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      // –ü–†–ê–í–ò–õ–û: –ö–æ–∑—ã—Ä—å = –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –ø–∏–∫–∏
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∏–∫–∞, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–ø–∏–∫–æ–≤—É—é –∏–∑ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç
      determineTrumpSuit: () => {
        const { lastDrawnCard, drawnHistory } = get();
        
        console.log(`üÉè [determineTrumpSuit] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∑—è—Ç–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏`);
        console.log(`üÉè [determineTrumpSuit] –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞: ${lastDrawnCard?.image || '–Ω–µ—Ç'}`);
        console.log(`üÉè [determineTrumpSuit] –ò—Å—Ç–æ—Ä–∏—è –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç: ${drawnHistory.length} –∫–∞—Ä—Ç`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
        if (lastDrawnCard && lastDrawnCard.image) {
          const suit = get().getCardSuit(lastDrawnCard.image);
          console.log(`üÉè [determineTrumpSuit] –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞: ${lastDrawnCard.image} ‚Üí –º–∞—Å—Ç—å: ${suit}`);
          
          // –ö–æ–∑—ã—Ä–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –º–∞—Å—Ç—å –ö–†–û–ú–ï –ø–∏–∫
          if (suit !== 'spades' && suit !== 'unknown') {
            console.log(`‚úÖ [determineTrumpSuit] –ù–ê–ô–î–ï–ù –ö–û–ó–´–†–¨: ${suit} (–∫–∞—Ä—Ç–∞: ${lastDrawnCard.image})`);
            return suit as 'clubs' | 'diamonds' | 'hearts' | 'spades';
          }
        }
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –ø–∏–∫–∞ –∏–ª–∏ –Ω–µ—Ç lastDrawnCard, –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        console.log(`üÉè [determineTrumpSuit] –ò—â–µ–º –Ω–µ–ø–∏–∫–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç (${drawnHistory.length} –∫–∞—Ä—Ç)`);
        drawnHistory.forEach((card, index) => {
          if (card && card.image) {
            const cardSuit = get().getCardSuit(card.image);
            console.log(`üÉè [determineTrumpSuit] –ò—Å—Ç–æ—Ä–∏—è ${index}: ${card.image} ‚Üí –º–∞—Å—Ç—å: ${cardSuit}`);
          }
        });
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–∏–∫–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for (let i = drawnHistory.length - 1; i >= 0; i--) {
          const card = drawnHistory[i];
          if (card && card.image) {
            const cardSuit = get().getCardSuit(card.image);
            console.log(`üÉè [determineTrumpSuit] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é ${i}: ${card.image} ‚Üí –º–∞—Å—Ç—å: ${cardSuit}`);
            if (cardSuit !== 'spades' && cardSuit !== 'unknown') {
              console.log(`‚úÖ [determineTrumpSuit] –ù–ê–ô–î–ï–ù –ö–û–ó–´–†–¨ –ò–ó –ò–°–¢–û–†–ò–ò: ${cardSuit} (–∫–∞—Ä—Ç–∞: ${card.image})`);
              return cardSuit as 'clubs' | 'diamonds' | 'hearts' | 'spades';
            }
          }
        }
        
        console.log(`‚ùå [determineTrumpSuit] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ –ø–∏–∫–∞–º–∏! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!`);
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–∏–∫–∏ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      getCardSuit: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        if (name.includes('clubs')) return 'clubs';
        if (name.includes('diamonds')) return 'diamonds';
        if (name.includes('hearts')) return 'hearts';
                 if (name.includes('spades')) return 'spades';
         return 'unknown';
       },
       
       // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –•–û–î–ê =====
       
       // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
       revealDeckCard: () => {
         const { deck } = get();
         if (deck.length === 0) return false;
         
         const topCard = { ...deck[0] };
         topCard.rank = get().getCardRank(topCard.image || '');
         topCard.open = true; // –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —Ö–æ–¥–∞
         
         // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–∑—ã—Ä—è
         const { drawnHistory } = get();
         set({ 
           revealedDeckCard: topCard,
           turnPhase: 'deck_card_revealed',
           drawnHistory: [...drawnHistory, topCard] // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
         });
         
         // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –°–õ–£–ß–ê–ô: –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ –≤ –ª–æ–≥–∞—Ö
         if (deck.length === 1) {
           console.log(`üÉè [revealDeckCard] –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫—Ä—ã—Ç–∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã: ${topCard.image}`);
           console.log(`üÉè [revealDeckCard] –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã -> –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2`);
         }
         
         console.log(`üé¥ [revealDeckCard] –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã –æ—Ç–∫—Ä—ã—Ç–∞: ${topCard.image}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ drawnHistory`);
         return true;
       },
       

       
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
      canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => {
        if (!deckCard.image || !playerTopCard.image) return false;
        
        const deckRank = get().getCardRank(deckCard.image);
        const playerRank = get().getCardRank(playerTopCard.image);
        

        
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã –º–æ–∂–µ—Ç –ª–µ—á—å –Ω–∞ –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞ 1 —Ä–∞–Ω–≥ –ë–û–õ–¨–®–ï
        // –ü—Ä–∏–º–µ—Ä: 5‚ô† (deckRank=5) –º–æ–∂–µ—Ç –ª–µ—á—å –Ω–∞ 4‚ô£ (playerRank=4)
        if (deckRank === 2) {
          return playerRank === 14; // –î–≤–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç—É–∑
        } else {
          return deckRank === (playerRank + 1); // –ü–†–ê–í–ò–õ–¨–ù–û: 5 –ª–æ–∂–∏—Ç—Å—è –Ω–∞ 4
        }
      },
       
       // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
       placeCardOnSelfByRules: () => {
         const { players, currentPlayerId, revealedDeckCard, deck, gameStage } = get();
         if (!currentPlayerId || !revealedDeckCard) return;
         
         const currentPlayer = players.find(p => p.id === currentPlayerId);
         if (!currentPlayer) return;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ –≤–µ—Ä—Ö —Å—Ç–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–∞ (–û–¢–ö–†–´–¢–û–ô!)
         revealedDeckCard.open = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
         currentPlayer.cards.push(revealedDeckCard);
         
                 // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck,
          lastDrawnCard: revealedDeckCard,
          lastPlayerToDrawCard: currentPlayerId,
          revealedDeckCard: null,
          skipHandAnalysis: true, // ‚≠ê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏!
          turnPhase: 'analyzing_hand' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É (–Ω–æ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º)
        });
        // set({ drawnHistory: [...get().drawnHistory, revealedDeckCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è
        if (newDeck.length === 0) {
          console.log(`üÉè [placeCardOnSelfByRules] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 1500);
        }
         
         get().showNotification(`${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º - —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞!`, 'success');
         
         // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç - –∏–¥–µ–º –∫ –∫–æ–ª–æ–¥–µ)
         setTimeout(() => {
           get().processPlayerTurn(currentPlayerId);
         }, 1000);
       },
       
             // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞)
      takeCardNotByRules: () => {
        const { players, currentPlayerId, revealedDeckCard, deck, gameStage } = get();
        if (!currentPlayerId || !revealedDeckCard) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return;
        
        // –ö–∞—Ä—Ç–∞ –ª–æ–∂–∏—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π)
        revealedDeckCard.open = true; // –ö–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π
        
        // –ö–∞—Ä—Ç–∞ –ª–æ–∂–∏—Ç—Å—è –ü–û–í–ï–†–• –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π)
        currentPlayer.cards.push(revealedDeckCard);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const newDeck = deck.slice(1);
        set({
          players: [...players],
          deck: newDeck,
          lastDrawnCard: revealedDeckCard,
          lastPlayerToDrawCard: currentPlayerId,
          turnPhase: 'turn_ended'
        });
        // set({ drawnHistory: [...get().drawnHistory, revealedDeckCard] }); // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ revealDeckCard
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ 2 –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö
        if (newDeck.length === 0) {
          console.log(`üÉè [takeCardNotByRules] –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ 2!`);
          setTimeout(() => {
            get().checkStage1End();
          }, 2000);
        }
        
        get().showNotification(`${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥`, 'info');
        get().resetTurnState();
        
        console.log(`üîÑ [takeCardNotByRules] –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä—É–∫—É, —Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É - —Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É!
        setTimeout(() => {
          get().nextTurn();
        }, 1500);
      },
       
                // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
         resetTurnState: () => {
           set({
             turnPhase: 'analyzing_hand',
             revealedDeckCard: null,
             availableTargets: [],
             canPlaceOnSelf: false,
             canPlaceOnSelfByRules: false,
             skipHandAnalysis: false
           });
         },
         
         // –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
         findAvailableTargetsForDeckCard: (deckCard: Card) => {
           const { players, currentPlayerId } = get();
           if (!deckCard.image || !currentPlayerId) return [];
           
           const deckRank = get().getCardRank(deckCard.image);
           console.log(`üÉè [findAvailableTargetsForDeckCard] –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã: ${deckCard.image}, —Ä–∞–Ω–≥: ${deckRank}`);
           
           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ findAvailableTargets)
           let targetRank: number;
           
           if (deckRank === 2) {
             // –î–≤–æ–π–∫–∞ –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢—É–∑ (14)
             targetRank = 14;
           } else {
             // –û–±—ã—á–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏—â–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
             // –¢—É–∑(14) ‚Üí –ö–æ—Ä–æ–ª—å(13), –ö–æ—Ä–æ–ª—å(13) ‚Üí –î–∞–º–∞(12), –∏ —Ç.–¥.
             targetRank = deckRank - 1;
           }
           
           console.log(`üÉè [findAvailableTargetsForDeckCard] –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Å –∫–∞—Ä—Ç–∞–º–∏ —Ä–∞–Ω–≥–∞: ${targetRank}`);
           
           const targets: number[] = [];
           players.forEach((player, index) => {
             if (player.id === currentPlayerId) return; // –ù–µ –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
             const playerTopCard = player.cards[player.cards.length - 1];
             if (playerTopCard && playerTopCard.open && playerTopCard.image) {
               const playerRank = get().getCardRank(playerTopCard.image);
               console.log(`üÉè [findAvailableTargetsForDeckCard] –°–æ–ø–µ—Ä–Ω–∏–∫ ${player.name} (–∏–Ω–¥–µ–∫—Å ${index}), –∫–∞—Ä—Ç–∞: ${playerTopCard.image}, —Ä–∞–Ω–≥: ${playerRank}`);
               if (playerRank === targetRank) {
                 console.log(`‚úÖ [findAvailableTargetsForDeckCard] –ù–ê–ô–î–ï–ù–ê –¶–ï–õ–¨ –î–õ–Ø –ö–ê–†–¢–´ –ò–ó –ö–û–õ–û–î–´: ${player.name} (–∏–Ω–¥–µ–∫—Å ${index})`);
                 targets.push(index);
               }
             }
           });
           
           console.log(`üÉè [findAvailableTargetsForDeckCard] –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã: ${targets.length}, –º–∞—Å—Å–∏–≤: [${targets.join(', ')}]`);
           return targets;
         },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø 2-–ô –°–¢–ê–î–ò–ò =====
         
         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2-–π —Å—Ç–∞–¥–∏–∏
         initializeStage2: () => {
           set({
             stage2TurnPhase: 'selecting_card',
             roundInProgress: false,
             currentRoundInitiator: null,
             tableStack: [],
             selectedHandCard: null
           });
         },
         
         // –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)
         selectHandCard: (card: Card) => {
           const { selectedHandCard } = get();
           
           if (selectedHandCard?.id === card.id) {
             // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É
             get().playSelectedCard();
           } else {
             // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
             set({ selectedHandCard: card });
           }
         },
         
         // –†–æ–∑—ã–≥—Ä—ã—à –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
         playSelectedCard: () => {
           const { selectedHandCard, currentPlayerId, players, tableStack, roundInProgress, stage2TurnPhase, trumpSuit } = get();
           if (!selectedHandCard || !currentPlayerId) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–∏—Ç—å—è –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏
           console.log(`üÉè [playSelectedCard] –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª –±–∏—Ç—å—è:`);
           console.log(`üÉè [playSelectedCard] - tableStack.length: ${tableStack.length}`);
           console.log(`üÉè [playSelectedCard] - stage2TurnPhase: ${stage2TurnPhase}`);
           console.log(`üÉè [playSelectedCard] - selectedHandCard: ${selectedHandCard?.image}`);
           console.log(`üÉè [playSelectedCard] - trumpSuit: ${trumpSuit}`);
           
           if (tableStack.length > 0) {
             // –ï—Å–ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã, –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥—É—Ä–∞–∫–∞
             const topCard = tableStack[tableStack.length - 1];
             console.log(`üÉè [playSelectedCard] - topCard –Ω–∞ —Å—Ç–æ–ª–µ: ${topCard?.image}`);
             
             const canBeat = get().canBeatCard(topCard, selectedHandCard, trumpSuit || '');
             console.log(`üÉè [playSelectedCard] - –†–µ–∑—É–ª—å—Ç–∞—Ç canBeatCard: ${canBeat}`);
             
             if (!canBeat) {
               get().showNotification('–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ!', 'error', 3000);
               console.log(`üÉè [playSelectedCard] ‚ùå –ë–õ–û–ö–ò–†–£–ï–ú –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –•–û–î!`);
               return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥
             }
             console.log(`üÉè [playSelectedCard] ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–∏—Ç—å—è —Å–æ–±–ª—é–¥–µ–Ω—ã`);
           } else {
             console.log(`üÉè [playSelectedCard] üÜï –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª - –ø—Ä–∞–≤–∏–ª–∞ –±–∏—Ç—å—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è`);
           }
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
           const maxCardsOnTable = players.length - 1;
           if (tableStack.length >= maxCardsOnTable) {
             get().showNotification(`–õ–∏–º–∏—Ç –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${maxCardsOnTable}). –ö–∞—Ä—Ç—ã —É—Ö–æ–¥—è—Ç –≤ –±–∏—Ç–æ!`, 'warning', 5000);
             // –í—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ —É—Ö–æ–¥—è—Ç –≤ –±–∏—Ç–æ
             set({
               tableStack: [],
               roundInProgress: false,
               currentRoundInitiator: null,
               stage2TurnPhase: 'selecting_card'
             });
             get().showNotification(`${currentPlayer.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ö–æ–¥!`, 'info', 3000);
             return;
           }
           
           // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
           const cardIndex = currentPlayer.cards.findIndex(c => c.id === selectedHandCard.id);
           if (cardIndex === -1) return;
           
           currentPlayer.cards.splice(cardIndex, 1);
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª (–≤—Å–µ–≥–¥–∞ –Ω–∞–≤–µ—Ä—Ö —Å—Ç–æ–ø–∫–∏)
           const playedCard = { ...selectedHandCard };
           playedCard.open = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞ —Å—Ç–æ–ª–µ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã
           
           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: –∞—Ç–∞–∫–∞ –∏–ª–∏ –∑–∞—â–∏—Ç–∞
           const isBeating = tableStack.length > 0 && stage2TurnPhase === 'waiting_beat';
           const actionType = isBeating ? '–ø–æ–±–∏–ª –∫–∞—Ä—Ç—É' : '—Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É';
           
           set({
             players: [...players],
             tableStack: [...tableStack, playedCard],
             selectedHandCard: null,
             roundInProgress: true,
             currentRoundInitiator: roundInProgress ? get().currentRoundInitiator : currentPlayerId,
             stage2TurnPhase: 'waiting_beat'
           });
           
           get().showNotification(`${currentPlayer.name} ${actionType} (–Ω–∞ —Å—Ç–æ–ª–µ: ${tableStack.length + 1}/${maxCardsOnTable})`, isBeating ? 'success' : 'info', 3000);
           
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç—ã
          get().checkStage3Transition(currentPlayerId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç—ã
          get().checkVictoryCondition();
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
          get().nextTurn();
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É
         canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => {
           if (!attackCard.image || !defendCard.image) return false;
           
           const attackSuit = get().getCardSuit(attackCard.image);
           const defendSuit = get().getCardSuit(defendCard.image);
           const attackRank = get().getCardRank(attackCard.image);
           const defendRank = get().getCardRank(defendCard.image);
           
           console.log(`üÉè [canBeatCard] –ü—Ä–æ–≤–µ—Ä–∫–∞: ${attackCard.image} (${attackSuit}, —Ä–∞–Ω–≥ ${attackRank}) vs ${defendCard.image} (${defendSuit}, —Ä–∞–Ω–≥ ${defendRank}), –∫–æ–∑—ã—Ä—å: ${trumpSuit}`);
           
           // –û–°–û–ë–û–ï –ü–†–ê–í–ò–õ–û: "–ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏" - –ø–∏–∫–∏ –º–æ–∂–Ω–æ –±–∏—Ç—å –¢–û–õ–¨–ö–û –ø–∏–∫–∞–º–∏
           if (attackSuit === 'spades' && defendSuit !== 'spades') {
             console.log(`üÉè [canBeatCard] ‚ùå –ü–∏–∫—É –º–æ–∂–Ω–æ –±–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–∏–∫–æ–π!`);
             return false;
           }
           
           // –ë–∏—Ç—å —Ç–æ–π –∂–µ –º–∞—Å—Ç—å—é —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π
           if (attackSuit === defendSuit) {
             const result = defendRank > attackRank;
             console.log(`üÉè [canBeatCard] –¢–∞ –∂–µ –º–∞—Å—Ç—å: ${result ? '‚úÖ' : '‚ùå'} (${defendRank} > ${attackRank})`);
             return result;
           }
           
           // –ë–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É (–ù–û –ù–ï –ü–ò–ö–£!)
           if (defendSuit === trumpSuit && attackSuit !== trumpSuit && attackSuit !== 'spades') {
             console.log(`üÉè [canBeatCard] ‚úÖ –ö–æ–∑—ã—Ä—å –±—å–µ—Ç –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é (–Ω–µ –ø–∏–∫—É)`);
             return true;
           }
           
           console.log(`üÉè [canBeatCard] ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è –±–∏—Ç—å—è`);
           return false;
         },
         
         // –ü–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É)
         beatCard: (defendCard: Card) => {
           const { currentPlayerId, players, tableStack, trumpSuit } = get();
           if (!currentPlayerId || tableStack.length === 0) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           const topCard = tableStack[tableStack.length - 1]; // –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞ –¥–ª—è –±–∏—Ç—å—è
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –ø–æ–±–∏—Ç—å
           if (!get().canBeatCard(topCard, defendCard, trumpSuit || '')) {
             get().showNotification('–ù–µ–ª—å–∑—è –ø–æ–±–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É!', 'error', 5000);
             return;
           }
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –±–∏—Ç—å—è
           const maxCardsOnTable = players.length - 1;
           if (tableStack.length >= maxCardsOnTable) {
             get().showNotification(`–õ–∏–º–∏—Ç –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${maxCardsOnTable}). –ö–∞—Ä—Ç—ã —É—Ö–æ–¥—è—Ç –≤ –±–∏—Ç–æ!`, 'warning', 5000);
             // –í—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ —É—Ö–æ–¥—è—Ç –≤ –±–∏—Ç–æ
             set({
               tableStack: [],
               roundInProgress: false,
               currentRoundInitiator: null,
               stage2TurnPhase: 'selecting_card'
             });
             get().showNotification(`${currentPlayer.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ö–æ–¥!`, 'info', 3000);
             return;
           }
           
           // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
           const cardIndex = currentPlayer.cards.findIndex(c => c.id === defendCard.id);
           if (cardIndex === -1) return;
           
           currentPlayer.cards.splice(cardIndex, 1);
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö)
           const playedCard = { ...defendCard };
           playedCard.open = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–∞—Ä—Ç–∞ –±–∏—Ç—å—è —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
           
           set({
             players: [...players],
             tableStack: [...tableStack, playedCard]
           });
           
           get().showNotification(`${currentPlayer.name} –ø–æ–±–∏–ª –∫–∞—Ä—Ç—É!`, 'success', 5000);
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é –ø–æ—Å–ª–µ –±–∏—Ç—å—è
           get().checkStage3Transition(currentPlayerId);
           
           // –ò–°–ü–†–ê–í–õ–ï–ù–û: –•–æ–¥ –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –ø–æ –∫—Ä—É–≥—É
           // (–∞ –Ω–µ –∫ —Ç–æ–º—É –∫—Ç–æ –æ—Ç–±–∏–ª—Å—è)
           get().nextTurn();
         },
         
         // –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É)
         takeTableCards: () => {
           const { currentPlayerId, players, tableStack } = get();
           if (!currentPlayerId || tableStack.length === 0) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           // –ë–µ—Ä–µ–º –¢–û–õ–¨–ö–û –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É (–ø–µ—Ä–≤—É—é –≤ —Å—Ç–æ–ø–∫–µ)
           const bottomCard = tableStack[0];
           bottomCard.open = true; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
           
           currentPlayer.cards.push(bottomCard);
           
           // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ–ª–µ
           const newTableStack = tableStack.slice(1);
           
           set({
             players: [...players],
             tableStack: newTableStack
           });
           
           get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É (–æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å—Ç–æ–ª–µ: ${newTableStack.length})`, 'warning', 5000);
           
           // –ï—Å–ª–∏ —Å—Ç–æ–ª –æ–ø—É—Å—Ç–µ–ª - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
           if (newTableStack.length === 0) {
             set({
               roundInProgress: false,
               currentRoundInitiator: null,
               stage2TurnPhase: 'selecting_card'
             });
             get().showNotification('–°—Ç–æ–ª –æ—á–∏—â–µ–Ω! –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥', 'info', 3000);
           }
           
                     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é (–∏–≥—Ä–æ–∫ –º–æ–≥ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –∫–∞—Ä—Ç)
          get().checkStage3Transition(currentPlayerId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã
          get().checkVictoryCondition();
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –ø–æ –∫—Ä—É–≥—É
          get().nextTurn();
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
         checkRoundComplete: () => {
           const { currentPlayerId, currentRoundInitiator, players } = get();
           if (!currentRoundInitiator) return false;
           
           // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Ä–∞—É–Ω–¥–∞
           const initiatorIndex = players.findIndex(p => p.id === currentRoundInitiator);
           const currentIndex = players.findIndex(p => p.id === currentPlayerId);
           
           if (initiatorIndex === -1 || currentIndex === -1) return false;
           
           // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –¥–æ—Ö–æ–¥–∏–º –¥–æ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
           const beforeInitiatorIndex = (initiatorIndex - 1 + players.length) % players.length;
           
           return currentIndex === beforeInitiatorIndex;
         },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø 3-–ô –°–¢–ê–î–ò–ò =====
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ 3-—é —Å—Ç–∞–¥–∏—é
         checkStage3Transition: (playerId: string) => {
           const { players, gameStage } = get();
           if (gameStage !== 2) return; // –¢–æ–ª—å–∫–æ –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ 3-—é
           
           const player = players.find(p => p.id === playerId);
           if (!player) return;
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
           const hasOpenCards = player.cards.some(card => card.open);
           
           console.log(`üÉè [checkStage3Transition] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ${player.name}:`);
           console.log(`üÉè [checkStage3Transition] - hasOpenCards: ${hasOpenCards}`);
           console.log(`üÉè [checkStage3Transition] - player.cards.length: ${player.cards.length}`);
           console.log(`üÉè [checkStage3Transition] - player.playerStage: ${player.playerStage}`);
           console.log(`üÉè [checkStage3Transition] - player.penki.length: ${player.penki.length}`);
           
           // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ 2-–π —Å—Ç–∞–¥–∏–∏ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ù–ï–¢ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ–Ω—å–∫–∏
           if (!hasOpenCards && player.playerStage === 2 && player.penki.length > 0) {
             console.log(`üÉè [checkStage3Transition] ‚úÖ –£ –∏–≥—Ä–æ–∫–∞ ${player.name} –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –≤–æ 2-–π —Å—Ç–∞–¥–∏–∏ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ–Ω—å–∫–∏!`);
             get().activatePenki(playerId);
           }
         },
         
         // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ–Ω—å–∫–æ–≤ (–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é)
         activatePenki: (playerId: string) => {
           const { players } = get();
           const player = players.find(p => p.id === playerId);
           if (!player || player.penki.length === 0) return;
           
           // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ–Ω—å–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã
           const activatedPenki = player.penki.map(card => ({
             ...card,
             open: true // –ü–µ–Ω—å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –≤ —Ä—É–∫—É
           }));
           
           player.cards = activatedPenki;
           player.penki = [];
           player.playerStage = 3;
           
           set({ players: [...players] });
           
           get().showNotification(`${player.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–µ–Ω—å–∫–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ 3-—é —Å—Ç–∞–¥–∏—é!`, 'info', 5000);
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
           get().checkVictoryCondition();
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
         checkVictoryCondition: () => {
           const { players } = get();
           
           // 1. –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–∞—Ä—Ç (–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö, –Ω–∏ –ø–µ–Ω—å–∫–æ–≤) - –ü–û–ë–ï–î–ò–¢–ï–õ–ò
           const winners: Player[] = [];
           const playersWithCards: Player[] = [];
           
           players.forEach(player => {
             const hasCards = player.cards.length > 0 || player.penki.length > 0;
             if (!hasCards) {
               winners.push(player);
             } else {
               playersWithCards.push(player);
             }
           });
           
           console.log(`üèÜ [checkVictoryCondition] –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–æ–≤:`);
           console.log(`üèÜ [checkVictoryCondition] - –ë–µ–∑ –∫–∞—Ä—Ç (–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏): ${winners.map(w => w.name).join(', ')}`);
           console.log(`üèÜ [checkVictoryCondition] - –° –∫–∞—Ä—Ç–∞–º–∏: ${playersWithCards.map(p => `${p.name}(${p.cards.length + p.penki.length})`).join(', ')}`);
           
           // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–û–ë–ï–î–ò–¢–ï–õ–Ø (–ø–µ—Ä–≤—ã–π –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∫–∞—Ä—Ç)
           if (winners.length === 1) {
             const winner = winners[0];
             const isUserWinner = winner.isUser;
             
             get().showNotification(`üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${winner.name}!`, 'success', 8000);
             
             // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å –∫–∞—Ä—Ç–∞–º–∏
             if (playersWithCards.length === 1) {
               const loser = playersWithCards[0];
               const totalCardsLeft = loser.cards.length + loser.penki.length;
               setTimeout(() => {
                 get().showNotification(`üí∏ –ü–†–û–ò–ì–†–ê–í–®–ò–ô: ${loser.name} (–æ—Å—Ç–∞–ª–æ—Å—å ${totalCardsLeft} –∫–∞—Ä—Ç)`, 'error', 8000);
               }, 2000);
             }
             
             // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
             const { stats } = get();
             set({
               isGameActive: false,
               stats: {
                 ...stats,
                 gamesPlayed: stats.gamesPlayed + 1,
                 gamesWon: isUserWinner ? stats.gamesWon + 1 : stats.gamesWon,
                 totalScore: stats.totalScore + (isUserWinner ? 100 : 0),
                 bestScore: isUserWinner ? Math.max(stats.bestScore, 100) : stats.bestScore
               }
             });
             
             setTimeout(() => {
               get().showNotification(
                 isUserWinner ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!' : 'üòî –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!', 
                 isUserWinner ? 'success' : 'info',
                 5000
               );
             }, 4000);
           }
           // 3. –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–∞—Ä—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - –Ω–∏—á—å—è
           else if (winners.length > 1) {
             const winnerNames = winners.map(w => w.name).join(', ');
             const hasUserWinner = winners.some(w => w.isUser);
             
             get().showNotification(`ü§ù –ù–ò–ß–¨–Ø! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winnerNames}`, 'success', 8000);
             
             // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–∏—á—å–µ–π
             const { stats } = get();
             set({
               isGameActive: false,
               stats: {
                 ...stats,
                 gamesPlayed: stats.gamesPlayed + 1,
                 gamesWon: hasUserWinner ? stats.gamesWon + 1 : stats.gamesWon,
                 totalScore: stats.totalScore + (hasUserWinner ? 50 : 0), // –ú–µ–Ω—å—à–µ –æ—á–∫–æ–≤ –∑–∞ –Ω–∏—á—å—é
                 bestScore: hasUserWinner ? Math.max(stats.bestScore, 50) : stats.bestScore
               }
             });
           }
           // 4. –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª - –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
         }
    }),
    {
      name: 'pidr-game-storage',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      partialize: (state) => ({
        stats: state.stats,
        settings: state.settings
      })
    }
  )
)