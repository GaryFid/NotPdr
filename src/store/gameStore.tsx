import React from 'react'
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export interface Card {
  id: string
  type: 'normal' | 'special' | 'pidr'
  title: string
  description: string
  image?: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  effect?: string
  rank?: number // –†–∞–Ω–≥ –∫–∞—Ä—Ç—ã (2-14)
  suit?: string // –ú–∞—Å—Ç—å –∫–∞—Ä—Ç—ã
  open?: boolean // –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞
}

export interface Player {
  id: string
  name: string
  avatar?: string
  score: number
  cards: Card[]
  isCurrentPlayer: boolean
}

export interface GameStats {
  gamesPlayed: number
  gamesWon: number
  totalScore: number
  bestScore: number
  cardsCollected: number
  achievements: string[]
}

export interface GameSettings {
  soundEnabled: boolean
  animationsEnabled: boolean
  hapticEnabled: boolean
  autoPlay: boolean
  difficulty: 'easy' | 'medium' | 'hard'
}

interface GameState {
  // –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isGameActive: boolean
  gameMode: 'single' | 'multiplayer'
  currentRound: number
  maxRounds: number
  players: Player[]
  currentPlayerId: string | null
  deck: Card[]
  playedCards: Card[]
  lastPlayedCard: Card | null
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
  gameStage: 1 | 2 | 3
  availableTargets: number[] // –ò–Ω–¥–µ–∫—Å—ã –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É
  mustDrawFromDeck: boolean // –î–æ–ª–∂–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
  canPlaceOnSelf: boolean // –ú–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É —Å–µ–±–µ
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  turnPhase: 'analyzing_hand' | 'showing_deck_hint' | 'deck_card_revealed' | 'waiting_deck_action' | 'showing_card_actions' | 'waiting_target_selection' | 'turn_ended'
  revealedDeckCard: Card | null // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã (—Å–ª–µ–≤–∞ –æ—Ç –∫–æ–ª–æ–¥—ã)
  canPlaceOnSelfByRules: boolean // –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  skipHandAnalysis: boolean // –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏ –ø–æ—Å–ª–µ —É–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ–±—è
  
  // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  lastDrawnCard: Card | null // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã
  lastPlayerToDrawCard: string | null // ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∑—è–ª –∫–∞—Ä—Ç—É
  trumpSuit: 'clubs' | 'diamonds' | 'hearts' | 'spades' | null // –ö–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
  tableStack: Card[] // –°—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ (–Ω–∏–∂–Ω—è—è = –ø–µ—Ä–≤–∞—è, –≤–µ—Ä—Ö–Ω—è—è = –ø–æ—Å–ª–µ–¥–Ω—è—è)
  selectedHandCard: Card | null // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ (–¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
  stage2TurnPhase: 'selecting_card' | 'playing_card' | 'waiting_beat' | 'round_complete' // –§–∞–∑—ã —Ö–æ–¥–∞ 2-–π —Å—Ç–∞–¥–∏–∏
  roundInProgress: boolean // –ò–¥–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –±–∏—Ç—å—è
  currentRoundInitiator: string | null // –ö—Ç–æ –Ω–∞—á–∞–ª —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  stats: GameStats
  settings: GameSettings
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  selectedCard: Card | null
  showCardDetails: boolean
  isLoading: boolean
  notification: {
    message: string
    type: 'success' | 'error' | 'warning' | 'info'
    visible: boolean
  } | null
  
  // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
  startGame: (mode: 'single' | 'multiplayer', playersCount?: number) => void
  endGame: () => void
  playCard: (cardId: string) => void
  drawCard: () => void
  nextTurn: () => void
  resetGame: () => void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è P.I.D.R –∏–≥—Ä—ã
  getCardRank: (imageName: string) => number
  findAvailableTargets: (currentPlayerId: string) => number[]
  canMakeMove: (currentPlayerId: string) => boolean
  makeMove: (targetPlayerId: string) => void
  drawCardFromDeck: () => boolean // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞
  placeCardOnSelf: () => void
  checkStage1End: () => void
  processPlayerTurn: (playerId: string) => void
  determineTrumpSuit: () => 'clubs' | 'diamonds' | 'hearts' | 'spades' | null
  getCardSuit: (imageName: string) => 'clubs' | 'diamonds' | 'hearts' | 'spades' | 'unknown'
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ö–æ–¥–∞
  revealDeckCard: () => boolean
  canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => boolean  
  placeCardOnSelfByRules: () => void
  takeCardNotByRules: () => void
  resetTurnState: () => void
  onDeckClick: () => void
  findAvailableTargetsForDeckCard: (deckCard: Card) => number[]
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è 2-–π —Å—Ç–∞–¥–∏–∏
  selectHandCard: (card: Card) => void
  playSelectedCard: () => void
  canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => boolean
  beatCard: (defendCard: Card) => void
  takeTableCards: () => void
  checkRoundComplete: () => boolean
  initializeStage2: () => void
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
  selectCard: (card: Card | null) => void
  addCardToDeck: (card: Card) => void
  removeCardFromDeck: (cardId: string) => void
  
  // –ò–≥—Ä–æ–∫–∏
  addPlayer: (name: string) => void
  removePlayer: (playerId: string) => void
  updatePlayerScore: (playerId: string, score: number) => void
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  updateSettings: (settings: Partial<GameSettings>) => void
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  updateStats: (stats: Partial<GameStats>) => void
  addAchievement: (achievementId: string) => void
  
  // UI
  showNotification: (message: string, type: 'success' | 'error' | 'warning' | 'info') => void
  hideNotification: () => void
  setLoading: (loading: boolean) => void
}

// –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã P.I.D.R.
const DEFAULT_CARDS: Card[] = [
  {
    id: '1',
    type: 'normal',
    title: '–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤',
    rarity: 'common'
  },
  {
    id: '2',
    type: 'special',
    title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ö–∞—Ä—Ç–∞ —Å –æ—Å–æ–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º',
    rarity: 'rare',
    effect: 'draw_extra'
  },
  {
    id: '3',
    type: 'pidr',
    title: 'P.I.D.R.',
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ P.I.D.R.!',
    rarity: 'legendary',
    effect: 'pidr_power'
  }
]

// –°–æ–∑–¥–∞–Ω–∏–µ Zustand —Å—Ç–æ—Ä–∞ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isGameActive: false,
      gameMode: 'single',
      currentRound: 0,
      maxRounds: 10,
      players: [],
      currentPlayerId: null,
      deck: [...DEFAULT_CARDS],
      playedCards: [],
      lastPlayedCard: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–¥–∏–π –∏–≥—Ä—ã P.I.D.R
      gameStage: 1,
      availableTargets: [],
      mustDrawFromDeck: false,
      canPlaceOnSelf: false,
      
      // –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      lastDrawnCard: null,
      lastPlayerToDrawCard: null,
      trumpSuit: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ 2-–π —Å—Ç–∞–¥–∏–∏ (–¥—É—Ä–∞–∫)
      tableStack: [],
      selectedHandCard: null,
      stage2TurnPhase: 'selecting_card',
      roundInProgress: false,
      currentRoundInitiator: null,
      
      // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
      turnPhase: 'analyzing_hand',
      revealedDeckCard: null,
      canPlaceOnSelfByRules: false,
      skipHandAnalysis: false,
      
      stats: {
        gamesPlayed: 0,
        gamesWon: 0,
        totalScore: 0,
        bestScore: 0,
        cardsCollected: 0,
        achievements: []
      },
      
      settings: {
        soundEnabled: true,
        animationsEnabled: true,
        hapticEnabled: true,
        autoPlay: false,
        difficulty: 'medium'
      },
      
      selectedCard: null,
      showCardDetails: false,
      isLoading: false,
      notification: null,
      
      // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      startGame: (mode, playersCount = 2) => {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç (52 –∫–∞—Ä—Ç—ã)
        const standardDeck = [
          // –î–≤–æ–π–∫–∏ (2)
          '2_of_clubs.png','2_of_diamonds.png','2_of_hearts.png','2_of_spades.png',
          // –¢—Ä–æ–π–∫–∏ (3) 
          '3_of_clubs.png','3_of_diamonds.png','3_of_hearts.png','3_of_spades.png',
          // –ß–µ—Ç–≤–µ—Ä–∫–∏ (4)
          '4_of_clubs.png','4_of_diamonds.png','4_of_hearts.png','4_of_spades.png',
          // –ü—è—Ç–µ—Ä–∫–∏ (5)
          '5_of_clubs.png','5_of_diamonds.png','5_of_hearts.png','5_of_spades.png',
          // –®–µ—Å—Ç–µ—Ä–∫–∏ (6)
          '6_of_clubs.png','6_of_diamonds.png','6_of_hearts.png','6_of_spades.png',
          // –°–µ–º–µ—Ä–∫–∏ (7)
          '7_of_clubs.png','7_of_diamonds.png','7_of_hearts.png','7_of_spades.png',
          // –í–æ—Å—å–º–µ—Ä–∫–∏ (8)
          '8_of_clubs.png','8_of_diamonds.png','8_of_hearts.png','8_of_spades.png',
          // –î–µ–≤—è—Ç–∫–∏ (9)
          '9_of_clubs.png','9_of_diamonds.png','9_of_hearts.png','9_of_spades.png',
          // –î–µ—Å—è—Ç–∫–∏ (10)
          '10_of_clubs.png','10_of_diamonds.png','10_of_hearts.png','10_of_spades.png',
          // –í–∞–ª–µ—Ç—ã (11)
          'jack_of_clubs.png','jack_of_diamonds.png','jack_of_hearts.png','jack_of_spades.png',
          // –î–∞–º—ã (12)
          'queen_of_clubs.png','queen_of_diamonds.png','queen_of_hearts.png','queen_of_spades.png',
          // –ö–æ—Ä–æ–ª–∏ (13)
          'king_of_clubs.png','king_of_diamonds.png','king_of_hearts.png','king_of_spades.png',
          // –¢—É–∑—ã (14)
          'ace_of_clubs.png','ace_of_diamonds.png','ace_of_hearts.png','ace_of_spades.png'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 52 –∫–∞—Ä—Ç—ã
        console.log('üÉè –†–∞–∑–º–µ—Ä –∫–æ–ª–æ–¥—ã:', standardDeck.length, '–∫–∞—Ä—Ç');
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        const shuffledImages = [...standardDeck].sort(() => Math.random() - 0.5);
        
        const players: Player[] = []
        const cardsPerPlayer = 3;
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞–∑–¥–∞–µ–º –∏–º –∫–∞—Ä—Ç—ã
        for (let i = 0; i < playersCount; i++) {
          const playerCards: Card[] = [];
          
          // –†–∞–∑–¥–∞–µ–º 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
          for (let j = 0; j < cardsPerPlayer; j++) {
            const cardIndex = i * cardsPerPlayer + j;
            const imageName = shuffledImages[cardIndex];
            
            playerCards.push({
              id: `card_${i}_${j}`,
              type: 'normal',
              title: `–ö–∞—Ä—Ç–∞ ${j + 1}`,
              description: '',
              image: imageName,
              rarity: 'common',
              rank: get().getCardRank(imageName),
              open: j === cardsPerPlayer - 1, // –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            });
          }
          
          players.push({
            id: `player_${i + 1}`,
            name: i === 0 ? '–í—ã' : `–ò–≥—Ä–æ–∫ ${i + 1}`,
            score: 0,
            cards: playerCards,
            isCurrentPlayer: i === 0
          });
        }
        
        // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
        const remainingCards: Card[] = shuffledImages.slice(playersCount * cardsPerPlayer).map((imageName, index) => ({
          id: `deck_card_${index}`,
          type: 'normal',
          title: `–ö–∞—Ä—Ç–∞ –∫–æ–ª–æ–¥—ã`,
          description: '',
          image: imageName,
          rarity: 'common',
          rank: get().getCardRank(imageName),
          open: false,
        }));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—Ç–∞—Ä—à–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–µ
        let firstPlayerIndex = 0;
        let maxRank = 0;
        players.forEach((player, index) => {
          const topCard = player.cards[player.cards.length - 1];
          if (topCard && topCard.rank && topCard.rank > maxRank) {
            maxRank = topCard.rank;
            firstPlayerIndex = index;
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        players.forEach((player, index) => {
          player.isCurrentPlayer = index === firstPlayerIndex;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        get().resetTurnState();
        
        set({
          isGameActive: true,
          gameMode: mode,
          currentRound: 1,
          players,
          currentPlayerId: players[firstPlayerIndex].id,
          deck: remainingCards,
          playedCards: [],
          lastPlayedCard: null,
          gameStage: 1,
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
          lastDrawnCard: null,
          lastPlayerToDrawCard: null,
          trumpSuit: null
        });
        
        get().showNotification(`–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –•–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º: ${players[firstPlayerIndex].name}`, 'success');
        
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏, –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
        setTimeout(() => {
          const targets = get().findAvailableTargets(players[firstPlayerIndex].id);
          if (targets.length > 0) {
            set({ availableTargets: targets });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ø–æ–ª–æ–∂–∏—Ç—å —Å–µ–±–µ"
            set({ canPlaceOnSelf: true });
          }
        }, 1000);
      },
      
      endGame: () => {
        const { players, stats } = get()
        const winner = players.reduce((prev, current) => 
          prev.score > current.score ? prev : current
        )
        
        const playerWon = winner.id === 'player_1'
        
        set({
          isGameActive: false,
          stats: {
            ...stats,
            gamesPlayed: stats.gamesPlayed + 1,
            gamesWon: playerWon ? stats.gamesWon + 1 : stats.gamesWon,
            totalScore: stats.totalScore + winner.score,
            bestScore: Math.max(stats.bestScore, winner.score)
          }
        })
        
        get().showNotification(
          playerWon ? '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!' : '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!', 
          playerWon ? 'success' : 'info'
        )
      },
      
      playCard: (cardId) => {
        const { players, currentPlayerId, playedCards } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer) return
        
        const cardIndex = currentPlayer.cards.findIndex(c => c.id === cardId)
        if (cardIndex === -1) return
        
        const playedCard = currentPlayer.cards[cardIndex]
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        currentPlayer.cards.splice(cardIndex, 1)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ
        const newPlayedCards = [...playedCards, playedCard]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
        let scoreBonus = 10
        if (playedCard.rarity === 'rare') scoreBonus = 20
        if (playedCard.rarity === 'epic') scoreBonus = 50
        if (playedCard.rarity === 'legendary') scoreBonus = 100
        
        currentPlayer.score += scoreBonus
        
        set({
          players: [...players],
          playedCards: newPlayedCards,
          lastPlayedCard: playedCard
        })
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã
        if (playedCard.effect === 'pidr_power') {
          get().showNotification('P.I.D.R. –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!', 'success')
          currentPlayer.score += 50 // –ë–æ–Ω—É—Å –∑–∞ P.I.D.R.
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
        setTimeout(() => get().nextTurn(), 1000)
      },
      
      drawCard: () => {
        const { players, currentPlayerId, deck } = get()
        const currentPlayer = players.find(p => p.id === currentPlayerId)
        
        if (!currentPlayer || deck.length === 0) return
        
        const drawnCard = deck[0]
        currentPlayer.cards.push(drawnCard)
        
        set({
          players: [...players],
          deck: deck.slice(1)
        })
        
        get().showNotification('–ö–∞—Ä—Ç–∞ –≤–∑—è—Ç–∞!', 'info')
      },
      
      nextTurn: () => {
        const { players, currentPlayerId, currentRound, maxRounds, gameStage } = get()
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const currentIndex = players.findIndex(p => p.id === currentPlayerId)
        const nextIndex = (currentIndex + 1) % players.length
        const nextPlayerId = players[nextIndex].id
        const nextPlayer = players[nextIndex]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach(p => p.isCurrentPlayer = p.id === nextPlayerId)
        
        let newRound = currentRound
        
        // –ï—Å–ª–∏ –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É)
        if (nextIndex === 0) {
          newRound = currentRound + 1
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
        get().resetTurnState();
        
        set({
          players: [...players],
          currentPlayerId: nextPlayerId,
          currentRound: newRound
        })
        
        get().showNotification(`–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ ${nextPlayer.name}`, 'info')
        
        // –î–ª—è 1-–π —Å—Ç–∞–¥–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞
        if (gameStage === 1) {
          setTimeout(() => get().processPlayerTurn(nextPlayerId), 1000)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–¥–∏–π –≤—ã—à–µ 1)
        if (gameStage > 1 && newRound > maxRounds) {
          get().endGame()
        }
      },
      
      resetGame: () => {
        set({
          isGameActive: false,
          currentRound: 0,
          players: [],
          currentPlayerId: null,
          deck: [...DEFAULT_CARDS],
          playedCards: [],
          lastPlayedCard: null,
          selectedCard: null
        })
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏
      selectCard: (card) => set({ selectedCard: card }),
      
      addCardToDeck: (card) => {
        const { deck } = get()
        set({ deck: [...deck, card] })
      },
      
      removeCardFromDeck: (cardId) => {
        const { deck } = get()
        set({ deck: deck.filter(c => c.id !== cardId) })
      },
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏
      addPlayer: (name) => {
        const { players } = get()
        const newPlayer: Player = {
          id: `player_${Date.now()}`,
          name,
          score: 0,
          cards: [],
          isCurrentPlayer: false
        }
        set({ players: [...players, newPlayer] })
      },
      
      removePlayer: (playerId) => {
        const { players } = get()
        set({ players: players.filter(p => p.id !== playerId) })
      },
      
      updatePlayerScore: (playerId, score) => {
        const { players } = get()
        const player = players.find(p => p.id === playerId)
        if (player) {
          player.score = score
          set({ players: [...players] })
        }
      },
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      updateSettings: (newSettings) => {
        const { settings } = get()
        set({ settings: { ...settings, ...newSettings } })
      },
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      updateStats: (newStats) => {
        const { stats } = get()
        set({ stats: { ...stats, ...newStats } })
      },
      
      addAchievement: (achievementId) => {
        const { stats } = get()
        if (!stats.achievements.includes(achievementId)) {
          set({
            stats: {
              ...stats,
              achievements: [...stats.achievements, achievementId]
            }
          })
          get().showNotification('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', 'success')
        }
      },
      
      // UI
      showNotification: (message, type) => {
        set({
          notification: {
            message,
            type,
            visible: true
          }
        })
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => get().hideNotification(), 3000)
      },
      
      hideNotification: () => {
        set({ notification: null })
      },
      
      setLoading: (loading) => set({ isLoading: loading }),
      
      // ===== –ú–ï–¢–û–î–´ –î–õ–Ø P.I.D.R –ò–ì–†–´ =====
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∫–∞—Ä—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      getCardRank: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        if (name.startsWith('ace')) return 14;
        if (name.startsWith('king')) return 13;
        if (name.startsWith('queen')) return 12;
        if (name.startsWith('jack')) return 11;
        const match = name.match(/(\d+)_of/);
        return match ? parseInt(match[1], 10) : 0;
      },
      
      // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
      findAvailableTargets: (currentPlayerId: string) => {
        const { players } = get();
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return [];
        
        // –ë–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
        const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
        if (!topCard || !topCard.open) return [];
        
        const currentRank = get().getCardRank(topCard.image || '');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª P.I.D.R.
        // –ü–†–ê–í–ò–õ–û: –ò—â–µ–º —É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –ù–ò–ñ–ï –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã
        // –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–≤–æ–π–∫–∞ (2) –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –¢—É–∑ (14)!
        let targetRank: number;
        
        if (currentRank === 2) {
          // –î–≤–æ–π–∫–∞ –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢—É–∑ (14) - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï!
          targetRank = 14;
        } else {
          // –û–±—ã—á–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏—â–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
          // –¢—É–∑(14) ‚Üí –ö–æ—Ä–æ–ª—å(13), –ö–æ—Ä–æ–ª—å(13) ‚Üí –î–∞–º–∞(12), –î–∞–º–∞(12) ‚Üí –í–∞–ª–µ—Ç(11), –í–∞–ª–µ—Ç(11) ‚Üí 10, ..., 3 ‚Üí 2
          targetRank = currentRank - 1;
        }
        
        const targets: number[] = [];
        players.forEach((player, index) => {
          if (player.id === currentPlayerId) return; // –ù–µ –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è (–ø–æ–∫–∞)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
          const playerTopCard = player.cards[player.cards.length - 1];
          if (playerTopCard && playerTopCard.open) {
            const playerRank = get().getCardRank(playerTopCard.image || '');
            if (playerRank === targetRank) {
              targets.push(index);
            }
          }
        });
        
        return targets;
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
      canMakeMove: (currentPlayerId: string) => {
        const targets = get().findAvailableTargets(currentPlayerId);
        return targets.length > 0;
      },
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      makeMove: (targetPlayerId: string) => {
        const { players, currentPlayerId, revealedDeckCard, turnPhase } = get();
        if (!currentPlayerId) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        const targetPlayer = players.find(p => p.id === targetPlayerId);
        
        if (!currentPlayer || !targetPlayer) return;
        
        let cardToMove: Card | undefined;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        if (revealedDeckCard && (turnPhase === 'waiting_target_selection' || turnPhase === 'waiting_deck_action')) {
          // –•–æ–¥–∏–º –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
          cardToMove = revealedDeckCard;
          
          // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const { deck } = get();
          set({
            deck: deck.slice(1),
            revealedDeckCard: null,
            lastDrawnCard: cardToMove,
            lastPlayerToDrawCard: currentPlayerId,
            turnPhase: 'turn_ended'
          });
        } else {
          // –•–æ–¥–∏–º –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏
          if (currentPlayer.cards.length === 0) return;
          cardToMove = currentPlayer.cards.pop();
          
          set({ 
            players: [...players],
            skipHandAnalysis: false // –ü–æ—Å–ª–µ —Ö–æ–¥–∞ –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏
          });
        }
        
        if (!cardToMove) return;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É
        targetPlayer.cards.push(cardToMove);
        
        set({ 
          players: [...players]
        });
        
        get().showNotification(`–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–ª–æ–∂–µ–Ω–∞ –Ω–∞ ${targetPlayer.name}!`, 'success');
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ (–∞–Ω–∞–ª–∏–∑ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ–¥ –∏–∑ —Ä—É–∫–∏
        if (!revealedDeckCard || (turnPhase !== 'waiting_target_selection' && turnPhase !== 'waiting_deck_action')) {
          setTimeout(() => {
            get().processPlayerTurn(currentPlayerId);
          }, 1000);
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ–¥ –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—É–∫–∏
          setTimeout(() => {
            get().processPlayerTurn(currentPlayerId);
          }, 1000);
        }
      },
      
      // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
      drawCardFromDeck: () => {
        const { deck, players, currentPlayerId } = get();
        if (deck.length === 0 || !currentPlayerId) return false;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return false;
        
        const drawnCard = deck[0];
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥ –∫ –∫–∞—Ä—Ç–µ
        drawnCard.rank = get().getCardRank(drawnCard.image || '');
        drawnCard.open = true;
        
        currentPlayer.cards.push(drawnCard);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        set({ 
          deck: deck.slice(1),
          players: [...players],
          lastDrawnCard: drawnCard,
          lastPlayerToDrawCard: currentPlayerId
        });
        
        get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–æ—Å—Ç–∞–ª–æ—Å—å: ${deck.length - 1})`, 'info');
        return true;
      },
      
      // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ–±—è
      placeCardOnSelf: () => {
        const { players, currentPlayerId } = get();
        if (!currentPlayerId) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer || currentPlayer.cards.length === 0) return;
        
        // –ö–∞—Ä—Ç–∞ —É–∂–µ –ª–µ–∂–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        set({ 
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          availableTargets: [] // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        });
        
        get().showNotification(`${currentPlayer.name} –æ—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç—É —É —Å–µ–±—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥`, 'warning');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π —Ö–æ–¥–∞
        get().checkStage1End();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        setTimeout(() => get().nextTurn(), 1000);
      },
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è 1-–π —Å—Ç–∞–¥–∏–∏
      checkStage1End: () => {
        const { deck, gameStage, lastPlayerToDrawCard, players } = get();
        if (gameStage !== 1 || deck.length > 0) return;
        
        console.log('üèÅ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞.');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        const trumpSuit = get().determineTrumpSuit();
        console.log('üÉè –ö–æ–∑—ã—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏:', trumpSuit);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑—è–≤—à–∏–π –∫–∞—Ä—Ç—É)
        let startingPlayerId = lastPlayerToDrawCard || players[0].id;
        console.log('üéÆ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏:', startingPlayerId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach(p => p.isCurrentPlayer = p.id === startingPlayerId);
        
        set({ 
          gameStage: 2,
          availableTargets: [],
          canPlaceOnSelf: false,
          mustDrawFromDeck: false,
          trumpSuit: trumpSuit,
          currentPlayerId: startingPlayerId,
          players: [...players],
          currentRound: 1 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 2-—é —Å—Ç–∞–¥–∏—é
        get().initializeStage2();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
        setTimeout(() => {
          get().showNotification('üéâ –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');
          
          setTimeout(() => {
            const startingPlayer = players.find(p => p.id === startingPlayerId);
            get().showNotification(`üöÄ –í—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è! –•–æ–¥–∏—Ç: ${startingPlayer?.name || '–ò–≥—Ä–æ–∫'}`, 'info');
            
            setTimeout(() => {
              const trumpName = trumpSuit === 'clubs' ? '–¢—Ä–µ—Ñ—ã' : 
                              trumpSuit === 'diamonds' ? '–ë—É–±–Ω—ã' :
                              trumpSuit === 'hearts' ? '–ß–µ—Ä–≤—ã' : 
                              trumpSuit === 'spades' ? '–ü–∏–∫–∏' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
              get().showNotification(`üÉè –ö–æ–∑—ã—Ä—å: ${trumpName}`, 'warning');
            }, 2000);
          }, 2000);
        }, 1000);
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ (–ù–û–í–ê–Ø –ª–æ–≥–∏–∫–∞)
      processPlayerTurn: (playerId: string) => {
        const { gameStage, players, skipHandAnalysis, deck } = get();
        if (gameStage !== 1) return;
        
        console.log(`üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞: ${playerId}, –ø—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏: ${skipHandAnalysis}`);
        
        const currentPlayer = players.find(p => p.id === playerId);
        if (!currentPlayer) return;
        
        // –î–ï–ë–ê–ì: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
        const openCards = currentPlayer.cards.filter(c => c.open);
        console.log(`üìã –£ –∏–≥—Ä–æ–∫–∞ ${currentPlayer.name}: ${currentPlayer.cards.length} –∫–∞—Ä—Ç, –∏–∑ –Ω–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö: ${openCards.length}`);
        if (openCards.length > 0) {
          console.log(`üìã –í–µ—Ä—Ö–Ω—è—è –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞:`, openCards[openCards.length - 1]?.image);
        }
        
        // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        if (!skipHandAnalysis && currentPlayer.cards.length > 0) {
          if (get().canMakeMove(playerId)) {
            // –ú–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏ –∏ –∂–¥–µ–º –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
            const targets = get().findAvailableTargets(playerId);
            console.log(`‚úÖ –ú–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏, —Ü–µ–ª–∏:`, targets);
            set({ 
              availableTargets: targets,
              turnPhase: 'analyzing_hand'  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏
            });
            get().showNotification(`${currentPlayer.name}: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞`, 'info');
            return; // –ñ–¥–µ–º –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞
          } else {
            console.log(`‚ùå –ù–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –∫–∞—Ä—Ç–æ–π –∏–∑ —Ä—É–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–ª–æ–¥–µ`);
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: —è–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É 2 (–∫–æ–ª–æ–¥–∞)
            get().showNotification(`${currentPlayer.name}: –Ω–µ—Ç —Ö–æ–¥–æ–≤ –∏–∑ —Ä—É–∫–∏, –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã`, 'warning');
          }
        } else if (skipHandAnalysis) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏, –∏–¥–µ–º –∫ –∫–æ–ª–æ–¥–µ`);
          set({ skipHandAnalysis: false }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
        
        // –≠–¢–ê–ü 2: –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–æ–¥–æ–π
        if (deck.length === 0) {
          console.log(`üîö –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞–¥–∏—é`);
          get().checkStage1End();
          return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–ª–æ–¥—É
        set({ turnPhase: 'showing_deck_hint' });
        get().showNotification(`${currentPlayer.name}: –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–¥—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É`, 'info');
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ
      onDeckClick: () => {
        const { turnPhase, currentPlayerId, players, revealedDeckCard } = get();
        if (turnPhase !== 'showing_deck_hint' || !currentPlayerId) return;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
        if (!get().revealDeckCard()) {
          get().checkStage1End();
          return;
        }
        
        const { revealedDeckCard: newRevealedCard } = get();
        if (!newRevealedCard) return;
        
        const currentPlayer = players.find(p => p.id === currentPlayerId);
        if (!currentPlayer) return;
        
                 console.log(`üÉè –û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã:`, newRevealedCard.image);
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–∞—Ä—Ç–æ–π –∏–∑ –∫–æ–ª–æ–¥—ã
         const deckTargets = get().findAvailableTargetsForDeckCard(newRevealedCard);
         const canMoveToOpponents = deckTargets.length > 0;
        
        let canPlaceOnSelfByRules = false;
        if (currentPlayer.cards.length > 0) {
          const topCard = currentPlayer.cards[currentPlayer.cards.length - 1];
          canPlaceOnSelfByRules = get().canPlaceCardOnSelf(newRevealedCard, topCard);
        }
        
                 set({
           turnPhase: 'waiting_deck_action',
           canPlaceOnSelfByRules: canPlaceOnSelfByRules,
           availableTargets: canMoveToOpponents ? deckTargets : []
         });
        
        console.log(`üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: —Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤: ${canMoveToOpponents}, –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è: ${canPlaceOnSelfByRules}`);
        
        if (canMoveToOpponents) {
          get().showNotification('–í—ã–±–µ—Ä–∏—Ç–µ: —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è', 'info');
        } else if (canPlaceOnSelfByRules) {
          get().showNotification('–ú–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–ª–∏ –≤–∑—è—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫', 'warning');
        } else {
          get().showNotification('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ - –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≤–∑—è—Ç–∞', 'warning');
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            get().takeCardNotByRules();
          }, 2000);
        }
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
      determineTrumpSuit: () => {
        const { lastDrawnCard } = get();
        
        if (!lastDrawnCard || !lastDrawnCard.image) return null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∑—è—Ç–æ–π –∫–∞—Ä—Ç—ã
        const lastSuit = get().getCardSuit(lastDrawnCard.image);
        
        // –ï—Å–ª–∏ –Ω–µ –ø–∏–∫–∏ - —ç—Ç–æ –∫–æ–∑—ã—Ä—å
        if (lastSuit !== 'spades' && lastSuit !== 'unknown') {
          return lastSuit as 'clubs' | 'diamonds' | 'hearts' | 'spades';
        }
        
        // –ï—Å–ª–∏ –ø–∏–∫–∏ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑—è—Ç—ã—Ö –∫–∞—Ä—Ç
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ-–ø–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–≤—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
        console.log('üÉè –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –ø–∏–∫–∏, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ-–ø–∏–∫–æ–≤—É—é');
        return 'hearts';
      },
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      getCardSuit: (imageName: string) => {
        const name = imageName.replace('.png', '').replace('/img/cards/', '');
        if (name.includes('clubs')) return 'clubs';
        if (name.includes('diamonds')) return 'diamonds';
        if (name.includes('hearts')) return 'hearts';
                 if (name.includes('spades')) return 'spades';
         return 'unknown';
       },
       
       // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –•–û–î–ê =====
       
       // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
       revealDeckCard: () => {
         const { deck } = get();
         if (deck.length === 0) return false;
         
         const topCard = { ...deck[0] };
         topCard.rank = get().getCardRank(topCard.image || '');
         topCard.open = true;
         
         set({ 
           revealedDeckCard: topCard,
           turnPhase: 'deck_card_revealed'
         });
         
         return true;
       },
       
       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
       canPlaceCardOnSelf: (deckCard: Card, playerTopCard: Card) => {
         if (!deckCard.image || !playerTopCard.image) return false;
         
         const deckRank = get().getCardRank(deckCard.image);
         const playerRank = get().getCardRank(playerTopCard.image);
         
         // –õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ findAvailableTargets: –∏—â–µ–º —Ü–µ–ª—å –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
         if (deckRank === 14) {
           return false; // –¢—É–∑ –Ω–µ –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –Ω–∏ –Ω–∞ —á—Ç–æ
         } else if (deckRank === 2) {
           return playerRank === 14; // –î–≤–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç—É–∑
         } else {
           return playerRank === (deckRank - 1); // –û–±—ã—á–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
         }
       },
       
       // –ü–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
       placeCardOnSelfByRules: () => {
         const { players, currentPlayerId, revealedDeckCard, deck } = get();
         if (!currentPlayerId || !revealedDeckCard) return;
         
         const currentPlayer = players.find(p => p.id === currentPlayerId);
         if (!currentPlayer) return;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–∞ –≤–µ—Ä—Ö —Å—Ç–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–∞ (–û–¢–ö–†–´–¢–û–ô!)
         revealedDeckCard.open = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
         currentPlayer.cards.push(revealedDeckCard);
         
         // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
         set({
           players: [...players],
           deck: deck.slice(1),
           lastDrawnCard: revealedDeckCard,
           lastPlayerToDrawCard: currentPlayerId,
           revealedDeckCard: null,
           skipHandAnalysis: true, // ‚≠ê –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—É–∫–∏!
           turnPhase: 'analyzing_hand' // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É (–Ω–æ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º)
         });
         
         get().showNotification(`${currentPlayer.name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–±—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º - —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞!`, 'success');
         
         // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç - –∏–¥–µ–º –∫ –∫–æ–ª–æ–¥–µ)
         setTimeout(() => {
           get().processPlayerTurn(currentPlayerId);
         }, 1000);
       },
       
       // –í–∑—è—Ç—å –∫–∞—Ä—Ç—É –Ω–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞)
       takeCardNotByRules: () => {
         const { players, currentPlayerId, revealedDeckCard, deck } = get();
         if (!currentPlayerId || !revealedDeckCard) return;
         
         const currentPlayer = players.find(p => p.id === currentPlayerId);
         if (!currentPlayer) return;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
         currentPlayer.cards.push(revealedDeckCard);
         
         // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏
         set({
           players: [...players],
           deck: deck.slice(1),
           lastDrawnCard: revealedDeckCard,
           lastPlayerToDrawCard: currentPlayerId,
           turnPhase: 'turn_ended'
         });
         
         get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥`, 'warning');
         get().resetTurnState();
         
         // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
         setTimeout(() => {
           get().nextTurn();
         }, 1500);
       },
       
                // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–¥–∞
         resetTurnState: () => {
           set({
             turnPhase: 'analyzing_hand',
             revealedDeckCard: null,
             availableTargets: [],
             canPlaceOnSelf: false,
             canPlaceOnSelfByRules: false,
             skipHandAnalysis: false
           });
         },
         
         // –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
         findAvailableTargetsForDeckCard: (deckCard: Card) => {
           const { players, currentPlayerId } = get();
           if (!deckCard.image || !currentPlayerId) return [];
           
           const deckRank = get().getCardRank(deckCard.image);
           
           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ findAvailableTargets)
           let targetRank: number;
           
           if (deckRank === 2) {
             // –î–≤–æ–π–∫–∞ –º–æ–∂–µ—Ç –ª–æ–∂–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –¢—É–∑ (14)
             targetRank = 14;
           } else {
             // –û–±—ã—á–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –∏—â–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ 1 —Ä–∞–Ω–≥ –Ω–∏–∂–µ
             // –¢—É–∑(14) ‚Üí –ö–æ—Ä–æ–ª—å(13), –ö–æ—Ä–æ–ª—å(13) ‚Üí –î–∞–º–∞(12), –∏ —Ç.–¥.
             targetRank = deckRank - 1;
           }
           
           const targets: number[] = [];
           players.forEach((player, index) => {
             if (player.id === currentPlayerId) return; // –ù–µ –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å–µ–±—è
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞
             const playerTopCard = player.cards[player.cards.length - 1];
             if (playerTopCard && playerTopCard.open && playerTopCard.image) {
               const playerRank = get().getCardRank(playerTopCard.image);
               if (playerRank === targetRank) {
                 targets.push(index);
               }
             }
           });
           
           return targets;
         },
         
         // ===== –ú–ï–¢–û–î–´ –î–õ–Ø 2-–ô –°–¢–ê–î–ò–ò =====
         
         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2-–π —Å—Ç–∞–¥–∏–∏
         initializeStage2: () => {
           set({
             stage2TurnPhase: 'selecting_card',
             roundInProgress: false,
             currentRoundInitiator: null,
             tableStack: [],
             selectedHandCard: null
           });
         },
         
         // –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)
         selectHandCard: (card: Card) => {
           const { selectedHandCard } = get();
           
           if (selectedHandCard?.id === card.id) {
             // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∏–≥—Ä–∞–µ–º –∫–∞—Ä—Ç—É
             get().playSelectedCard();
           } else {
             // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
             set({ selectedHandCard: card });
           }
         },
         
         // –†–æ–∑—ã–≥—Ä—ã—à –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
         playSelectedCard: () => {
           const { selectedHandCard, currentPlayerId, players, tableStack, roundInProgress } = get();
           if (!selectedHandCard || !currentPlayerId) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
           const cardIndex = currentPlayer.cards.findIndex(c => c.id === selectedHandCard.id);
           if (cardIndex === -1) return;
           
           currentPlayer.cards.splice(cardIndex, 1);
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª (–≤—Å–µ–≥–¥–∞ –Ω–∞–≤–µ—Ä—Ö —Å—Ç–æ–ø–∫–∏)
           const playedCard = { ...selectedHandCard };
           playedCard.open = false; // –ù–∞ —Å—Ç–æ–ª–µ –∫–∞—Ä—Ç—ã —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö
           
           set({
             players: [...players],
             tableStack: [...tableStack, playedCard],
             selectedHandCard: null,
             roundInProgress: true,
             currentRoundInitiator: roundInProgress ? get().currentRoundInitiator : currentPlayerId,
             stage2TurnPhase: 'waiting_beat'
           });
           
           get().showNotification(`${currentPlayer.name} —Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É`, 'info');
           
           // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
           get().nextTurn();
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É
         canBeatCard: (attackCard: Card, defendCard: Card, trumpSuit: string) => {
           if (!attackCard.image || !defendCard.image) return false;
           
           const attackSuit = get().getCardSuit(attackCard.image);
           const defendSuit = get().getCardSuit(defendCard.image);
           const attackRank = get().getCardRank(attackCard.image);
           const defendRank = get().getCardRank(defendCard.image);
           
           // –ü—Ä–∞–≤–∏–ª–æ "–ü–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ü–∏–∫—è–º–∏"
           if (attackSuit === 'spades' && defendSuit !== 'spades') {
             return false;
           }
           
           // –ë–∏—Ç—å —Ç–æ–π –∂–µ –º–∞—Å—Ç—å—é —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π
           if (attackSuit === defendSuit) {
             return defendRank > attackRank;
           }
           
           // –ë–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É
           if (defendSuit === trumpSuit && attackSuit !== trumpSuit) {
             return true;
           }
           
           return false;
         },
         
         // –ü–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ
         beatCard: (defendCard: Card) => {
           const { currentPlayerId, players, tableStack, trumpSuit } = get();
           if (!currentPlayerId || tableStack.length === 0) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           const topCard = tableStack[tableStack.length - 1]; // –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞ –¥–ª—è –±–∏—Ç—å—è
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –ø–æ–±–∏—Ç—å
           if (!get().canBeatCard(topCard, defendCard, trumpSuit || '')) {
             get().showNotification('–ù–µ–ª—å–∑—è –ø–æ–±–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É!', 'error');
             return;
           }
           
           // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
           const cardIndex = currentPlayer.cards.findIndex(c => c.id === defendCard.id);
           if (cardIndex === -1) return;
           
           currentPlayer.cards.splice(cardIndex, 1);
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
           const playedCard = { ...defendCard };
           playedCard.open = false; // –†—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö
           
           set({
             players: [...players],
             tableStack: [...tableStack, playedCard]
           });
           
           get().showNotification(`${currentPlayer.name} –ø–æ–±–∏–ª –∫–∞—Ä—Ç—É!`, 'success');
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
           if (get().checkRoundComplete()) {
             // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω - –∫–∞—Ä—Ç—ã –≤ –±–∏—Ç—É, —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞
             setTimeout(() => {
               set({
                 tableStack: [],
                 roundInProgress: false,
                 currentRoundInitiator: null,
                 stage2TurnPhase: 'selecting_card'
               });
               get().showNotification('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ö–∞—Ä—Ç—ã –≤ –±–∏—Ç—É', 'success');
             }, 1000);
           } else {
             // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
             get().nextTurn();
           }
         },
         
         // –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
         takeTableCards: () => {
           const { currentPlayerId, players, tableStack } = get();
           if (!currentPlayerId || tableStack.length === 0) return;
           
           const currentPlayer = players.find(p => p.id === currentPlayerId);
           if (!currentPlayer) return;
           
           // –ë–µ—Ä–µ–º –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É (–ø–µ—Ä–≤—É—é –≤ —Å—Ç–æ–ø–∫–µ)
           const bottomCard = tableStack[0];
           bottomCard.open = true; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
           
           currentPlayer.cards.push(bottomCard);
           
           set({
             players: [...players],
             tableStack: tableStack.slice(1) // –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω—é—é –∫–∞—Ä—Ç—É
           });
           
           get().showNotification(`${currentPlayer.name} –≤–∑—è–ª –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ–ª–∞`, 'warning');
           
           // –ï—Å–ª–∏ —Å—Ç–æ–ª –ø—É—Å—Ç - —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
           if (tableStack.length === 1) { // –ë—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞
             set({
               tableStack: [],
               roundInProgress: false,
               currentRoundInitiator: null,
               stage2TurnPhase: 'selecting_card'
             });
           }
           
           // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
           get().nextTurn();
         },
         
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
         checkRoundComplete: () => {
           const { currentPlayerId, currentRoundInitiator, players } = get();
           if (!currentRoundInitiator) return false;
           
           // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Ä–∞—É–Ω–¥–∞
           const initiatorIndex = players.findIndex(p => p.id === currentRoundInitiator);
           const currentIndex = players.findIndex(p => p.id === currentPlayerId);
           
           if (initiatorIndex === -1 || currentIndex === -1) return false;
           
           // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –¥–æ—Ö–æ–¥–∏–º –¥–æ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
           const beforeInitiatorIndex = (initiatorIndex - 1 + players.length) % players.length;
           
           return currentIndex === beforeInitiatorIndex;
         }
    }),
    {
      name: 'pidr-game-storage',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      partialize: (state) => ({
        stats: state.stats,
        settings: state.settings
      })
    }
  )
)